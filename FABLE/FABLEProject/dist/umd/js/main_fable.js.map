{"version":3,"file":null,"sources":["../../../node_modules/fable-core/Symbol.js","../../../node_modules/fable-core/Util.js","../../../node_modules/fable-core/ListClass.js","../../../node_modules/fable-core/GenericComparer.js","../../../node_modules/fable-core/Seq.js","../../../node_modules/fable-core/Map.js","../../../node_modules/fable-core/List.js","../../../src/fs/State.fs","../../../js_includes/Main_test.fs","../../../node_modules/fable-core/RegExp.js","../../../node_modules/fable-core/Long.js","../../../node_modules/fable-core/TimeSpan.js","../../../node_modules/fable-core/Date.js","../../../node_modules/fable-core/String.js","../../../src/fs/Error.fs","../../../src/fs/Interpreter.fs","../../../src/fs/Types.fs","../../../src/fs/ARMv4.fs","../../../src/fs/Parser.fs","../../../src/fs/Conditions.fs","../../../src/fs/Tokeniser.fs","../../../src/fs/GetStates.fs","../../../src/fs/Main_test.fs"],"sourcesContent":["var fableGlobal = function () {\n    var globalObj = typeof window !== \"undefined\" ? window\n        : (typeof global !== \"undefined\" ? global\n            : (typeof self !== \"undefined\" ? self : null));\n    if (typeof globalObj.__FABLE_CORE__ === \"undefined\") {\n        globalObj.__FABLE_CORE__ = {\n            types: new Map(),\n            symbols: {\n                reflection: Symbol(\"reflection\"),\n            }\n        };\n    }\n    return globalObj.__FABLE_CORE__;\n}();\nexport function setType(fullName, cons) {\n    fableGlobal.types.set(fullName, cons);\n}\nexport function getType(fullName) {\n    return fableGlobal.types.get(fullName);\n}\nexport default (fableGlobal.symbols);\n","import FSymbol from \"./Symbol\";\nvar NonDeclaredType = (function () {\n    function NonDeclaredType(kind, definition, generics) {\n        this.kind = kind;\n        this.definition = definition;\n        this.generics = generics;\n    }\n    NonDeclaredType.prototype.Equals = function (other) {\n        if (this.kind === other.kind && this.definition === other.definition) {\n            return typeof this.generics === \"object\"\n                ? equalsRecords(this.generics, other.generics)\n                : this.generics === other.generics;\n        }\n        return false;\n    };\n    return NonDeclaredType;\n}());\nexport { NonDeclaredType };\nexport var Any = new NonDeclaredType(\"Any\");\nexport var Unit = new NonDeclaredType(\"Unit\");\nexport function Option(t) {\n    return new NonDeclaredType(\"Option\", \"Option\", t);\n}\nfunction FArray(t) {\n    return new NonDeclaredType(\"Array\", \"Array\", t);\n}\nexport { FArray as Array };\nexport function Tuple(ts) {\n    return new NonDeclaredType(\"Tuple\", \"Tuple\", ts);\n}\nexport function GenericParam(definition) {\n    return new NonDeclaredType(\"GenericParam\", definition);\n}\nexport function Interface(definition) {\n    return new NonDeclaredType(\"Interface\", definition);\n}\nexport function makeGeneric(typeDef, genArgs) {\n    return new NonDeclaredType(\"GenericType\", typeDef, genArgs);\n}\nexport function isGeneric(typ) {\n    return typ instanceof NonDeclaredType && typ.generics != null;\n}\n/**\n * Returns the parent if this is a declared generic type or the argument otherwise.\n * Attention: Unlike .NET this doesn't throw an exception if type is not generic.\n*/\nexport function getDefinition(typ) {\n    return isGeneric(typ) ? typ.definition : typ;\n}\nexport function extendInfo(cons, info) {\n    var parent = Object.getPrototypeOf(cons.prototype);\n    if (typeof parent[FSymbol.reflection] === \"function\") {\n        var newInfo_1 = {}, parentInfo_1 = parent[FSymbol.reflection]();\n        Object.getOwnPropertyNames(info).forEach(function (k) {\n            var i = info[k];\n            if (typeof i === \"object\") {\n                newInfo_1[k] = Array.isArray(i)\n                    ? (parentInfo_1[k] || []).concat(i)\n                    : Object.assign(parentInfo_1[k] || {}, i);\n            }\n            else {\n                newInfo_1[k] = i;\n            }\n        });\n        return newInfo_1;\n    }\n    return info;\n}\nexport function hasInterface(obj, interfaceName) {\n    if (typeof obj[FSymbol.reflection] === \"function\") {\n        var interfaces = obj[FSymbol.reflection]().interfaces;\n        return Array.isArray(interfaces) && interfaces.indexOf(interfaceName) > -1;\n    }\n    return false;\n}\nexport function isArray(obj) {\n    return Array.isArray(obj) || ArrayBuffer.isView(obj);\n}\nexport function getRestParams(args, idx) {\n    for (var _len = args.length, restArgs = Array(_len > idx ? _len - idx : 0), _key = idx; _key < _len; _key++)\n        restArgs[_key - idx] = args[_key];\n    return restArgs;\n}\nexport function toString(o) {\n    return o != null && typeof o.ToString == \"function\" ? o.ToString() : String(o);\n}\nexport function hash(x) {\n    var s = JSON.stringify(x);\n    var h = 5381, i = 0, len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function equals(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y)\n        return true;\n    else if (x == null)\n        return y == null;\n    else if (y == null)\n        return false;\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\n        return false;\n    else if (typeof x.Equals === \"function\")\n        return x.Equals(y);\n    else if (Array.isArray(x)) {\n        if (x.length != y.length)\n            return false;\n        for (var i = 0; i < x.length; i++)\n            if (!equals(x[i], y[i]))\n                return false;\n        return true;\n    }\n    else if (ArrayBuffer.isView(x)) {\n        if (x.byteLength !== y.byteLength)\n            return false;\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\n        for (var i = 0; i < x.byteLength; i++)\n            if (dv1.getUint8(i) !== dv2.getUint8(i))\n                return false;\n        return true;\n    }\n    else if (x instanceof Date)\n        return x.getTime() == y.getTime();\n    else\n        return false;\n}\nexport function compare(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y)\n        return 0;\n    if (x == null)\n        return y == null ? 0 : -1;\n    else if (y == null)\n        return 1; // everything is bigger than null\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\n        return -1;\n    else if (typeof x.CompareTo === \"function\")\n        return x.CompareTo(y);\n    else if (Array.isArray(x)) {\n        if (x.length != y.length)\n            return x.length < y.length ? -1 : 1;\n        for (var i = 0, j = 0; i < x.length; i++)\n            if ((j = compare(x[i], y[i])) !== 0)\n                return j;\n        return 0;\n    }\n    else if (ArrayBuffer.isView(x)) {\n        if (x.byteLength != y.byteLength)\n            return x.byteLength < y.byteLength ? -1 : 1;\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\n        for (var i = 0, b1 = 0, b2 = 0; i < x.byteLength; i++) {\n            b1 = dv1.getUint8(i), b2 = dv2.getUint8(i);\n            if (b1 < b2)\n                return -1;\n            if (b1 > b2)\n                return 1;\n        }\n        return 0;\n    }\n    else if (x instanceof Date)\n        return compare(x.getTime(), y.getTime());\n    else\n        return x < y ? -1 : 1;\n}\nexport function equalsRecords(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y) {\n        return true;\n    }\n    else {\n        var keys = Object.getOwnPropertyNames(x);\n        for (var i = 0; i < keys.length; i++) {\n            if (!equals(x[keys[i]], y[keys[i]]))\n                return false;\n        }\n        return true;\n    }\n}\nexport function compareRecords(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y) {\n        return 0;\n    }\n    else {\n        var keys = Object.getOwnPropertyNames(x);\n        for (var i = 0; i < keys.length; i++) {\n            var res = compare(x[keys[i]], y[keys[i]]);\n            if (res !== 0)\n                return res;\n        }\n        return 0;\n    }\n}\nexport function equalsUnions(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y) {\n        return true;\n    }\n    else if (x.Case !== y.Case) {\n        return false;\n    }\n    else {\n        for (var i = 0; i < x.Fields.length; i++) {\n            if (!equals(x.Fields[i], y.Fields[i]))\n                return false;\n        }\n        return true;\n    }\n}\nexport function compareUnions(x, y) {\n    // Optimization if they are referencially equal\n    if (x === y) {\n        return 0;\n    }\n    else {\n        var res = compare(x.Case, y.Case);\n        if (res !== 0)\n            return res;\n        for (var i = 0; i < x.Fields.length; i++) {\n            res = compare(x.Fields[i], y.Fields[i]);\n            if (res !== 0)\n                return res;\n        }\n        return 0;\n    }\n}\nexport function createDisposable(f) {\n    return _a = {\n            Dispose: f\n        },\n        _a[FSymbol.reflection] = function () { return { interfaces: [\"System.IDisposable\"] }; },\n        _a;\n    var _a;\n}\nexport function createObj(fields) {\n    var iter = fields[Symbol.iterator]();\n    var cur = iter.next(), o = {};\n    while (!cur.done) {\n        o[cur.value[0]] = cur.value[1];\n        cur = iter.next();\n    }\n    return o;\n}\nexport function toPlainJsObj(source) {\n    if (source != null && source.constructor != Object) {\n        var target = {};\n        var props = Object.getOwnPropertyNames(source);\n        for (var i = 0; i < props.length; i++) {\n            target[props[i]] = source[props[i]];\n        }\n        // Copy also properties from prototype, see #192\n        var proto = Object.getPrototypeOf(source);\n        if (proto != null) {\n            props = Object.getOwnPropertyNames(proto);\n            for (var i = 0; i < props.length; i++) {\n                var prop = Object.getOwnPropertyDescriptor(proto, props[i]);\n                if (prop.value) {\n                    target[props[i]] = prop.value;\n                }\n                else if (prop.get) {\n                    target[props[i]] = prop.get.apply(source);\n                }\n            }\n        }\n        return target;\n    }\n    else {\n        return source;\n    }\n}\nexport function round(value, digits) {\n    if (digits === void 0) { digits = 0; }\n    var m = Math.pow(10, digits);\n    var n = +(digits ? value * m : value).toFixed(8);\n    var i = Math.floor(n), f = n - i;\n    var e = 1e-8;\n    var r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 == 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\n","import FSymbol from \"./Symbol\";\nimport { toString } from \"./Util\";\nimport { equals } from \"./Util\";\nimport { compare } from \"./Util\";\n// This module is split from List.ts to prevent cyclic dependencies\nexport function ofArray(args, base) {\n    var acc = base || new List();\n    for (var i = args.length - 1; i >= 0; i--) {\n        acc = new List(args[i], acc);\n    }\n    return acc;\n}\nvar List = (function () {\n    function List(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    List.prototype.ToString = function () {\n        return \"[\" + Array.from(this).map(toString).join(\"; \") + \"]\";\n    };\n    List.prototype.Equals = function (x) {\n        // Optimization if they are referencially equal\n        if (this === x) {\n            return true;\n        }\n        else {\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\n            for (;;) {\n                var cur1 = iter1.next(), cur2 = iter2.next();\n                if (cur1.done)\n                    return cur2.done ? true : false;\n                else if (cur2.done)\n                    return false;\n                else if (!equals(cur1.value, cur2.value))\n                    return false;\n            }\n        }\n    };\n    List.prototype.CompareTo = function (x) {\n        // Optimization if they are referencially equal\n        if (this === x) {\n            return 0;\n        }\n        else {\n            var acc = 0;\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\n            for (;;) {\n                var cur1 = iter1.next(), cur2 = iter2.next();\n                if (cur1.done)\n                    return cur2.done ? acc : -1;\n                else if (cur2.done)\n                    return 1;\n                else {\n                    acc = compare(cur1.value, cur2.value);\n                    if (acc != 0)\n                        return acc;\n                }\n            }\n        }\n    };\n    Object.defineProperty(List.prototype, \"length\", {\n        get: function () {\n            var cur = this, acc = 0;\n            while (cur.tail != null) {\n                cur = cur.tail;\n                acc++;\n            }\n            return acc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    List.prototype[Symbol.iterator] = function () {\n        var cur = this;\n        return {\n            next: function () {\n                var tmp = cur;\n                cur = cur.tail;\n                return { done: tmp.tail == null, value: tmp.head };\n            }\n        };\n    };\n    //   append(ys: List<T>): List<T> {\n    //     return append(this, ys);\n    //   }\n    //   choose<U>(f: (x: T) => U, xs: List<T>): List<U> {\n    //     return choose(f, this);\n    //   }\n    //   collect<U>(f: (x: T) => List<U>): List<U> {\n    //     return collect(f, this);\n    //   }\n    //   filter(f: (x: T) => boolean): List<T> {\n    //     return filter(f, this);\n    //   }\n    //   where(f: (x: T) => boolean): List<T> {\n    //     return filter(f, this);\n    //   }\n    //   map<U>(f: (x: T) => U): List<U> {\n    //     return map(f, this);\n    //   }\n    //   mapIndexed<U>(f: (i: number, x: T) => U): List<U> {\n    //     return mapIndexed(f, this);\n    //   }\n    //   partition(f: (x: T) => boolean): [List<T>, List<T>] {\n    //     return partition(f, this) as [List<T>, List<T>];\n    //   }\n    //   reverse(): List<T> {\n    //     return reverse(this);\n    //   }\n    //   slice(lower: number, upper: number): List<T> {\n    //     return slice(lower, upper, this);\n    //   }\n    List.prototype[FSymbol.reflection] = function () {\n        return {\n            type: \"Microsoft.FSharp.Collections.FSharpList\",\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\n        };\n    };\n    return List;\n}());\nexport default List;\n","import { compare } from \"./Util\";\nimport FSymbol from \"./Symbol\";\nvar GenericComparer = (function () {\n    function GenericComparer(f) {\n        this.Compare = f || compare;\n    }\n    GenericComparer.prototype[FSymbol.reflection] = function () {\n        return { interfaces: [\"System.IComparer\"] };\n    };\n    return GenericComparer;\n}());\nexport default GenericComparer;\n","import { equals } from \"./Util\";\nimport { compare } from \"./Util\";\nimport { permute as arrayPermute } from \"./Array\";\nimport List from \"./ListClass\";\nfunction __failIfNone(res) {\n    if (res == null)\n        throw new Error(\"Seq did not contain any matching element\");\n    return res;\n}\nexport function toList(xs) {\n    return foldBack(function (x, acc) {\n        return new List(x, acc);\n    }, xs, new List());\n}\nexport function ofList(xs) {\n    return delay(function () { return unfold(function (x) { return x.tail != null ? [x.head, x.tail] : null; }, xs); });\n}\nexport function ofArray(xs) {\n    return delay(function () { return unfold(function (i) { return i < xs.length ? [xs[i], i + 1] : null; }, 0); });\n}\nexport function append(xs, ys) {\n    return delay(function () {\n        var firstDone = false;\n        var i = xs[Symbol.iterator]();\n        var iters = [i, null];\n        return unfold(function () {\n            var cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs) {\n    var count = 1;\n    var sum = reduce(function (acc, x) {\n        count++;\n        return acc + x;\n    }, xs);\n    return sum / count;\n}\nexport function averageBy(f, xs) {\n    var count = 1;\n    var sum = reduce(function (acc, x) {\n        count++;\n        return (count === 2 ? f(acc) : acc) + f(x);\n    }, xs);\n    return sum / count;\n}\nexport function concat(xs) {\n    return delay(function () {\n        var iter = xs[Symbol.iterator]();\n        var output = null;\n        return unfold(function (innerIter) {\n            var hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    var cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    var cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    var trySkipToNext = function (iter) {\n        var cur = iter.next();\n        if (!cur.done) {\n            var y = f(cur.value);\n            return y != null ? [y, iter] : trySkipToNext(iter);\n        }\n        return void 0;\n    };\n    return delay(function () {\n        return unfold(function (iter) {\n            return trySkipToNext(iter);\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function compareWith(f, xs, ys) {\n    var nonZero = tryFind(function (i) { return i != 0; }, map2(function (x, y) { return f(x, y); }, xs, ys));\n    return nonZero != null ? nonZero : count(xs) - count(ys);\n}\nexport function delay(f) {\n    return _a = {},\n        _a[Symbol.iterator] = function () { return f()[Symbol.iterator](); },\n        _a;\n    var _a;\n}\nexport function empty() {\n    return unfold(function () { return void 0; });\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(function () { return cond() ? [xs, true] : null; }));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(function () {\n        var iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold(function (iter) {\n            try {\n                var cur = iter.next();\n                return !cur.done ? [cur.value, iter] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    var isDisposed = false;\n    var disposeOnce = function () {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    var iter = xs[Symbol.iterator]();\n    var fst = iter.next();\n    if (fst.done)\n        throw new Error(\"Seq was empty\");\n    var snd = iter.next();\n    if (!snd.done)\n        throw new Error(\"Seq had multiple items\");\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    var exclusionItems = Array.from(itemsToExclude);\n    var testIsNotInExclusionItems = function (element) { return !exclusionItems.some(function (excludedItem) { return equals(excludedItem, element); }); };\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    function aux(iter) {\n        var cur = iter.next();\n        return !cur.done && (f(cur.value) || aux(iter));\n    }\n    return aux(xs[Symbol.iterator]());\n}\nexport function exists2(f, xs, ys) {\n    function aux(iter1, iter2) {\n        var cur1 = iter1.next(), cur2 = iter2.next();\n        return !cur1.done && !cur2.done && (f(cur1.value, cur2.value) || aux(iter1, iter2));\n    }\n    return aux(xs[Symbol.iterator](), ys[Symbol.iterator]());\n}\nexport function filter(f, xs) {\n    function trySkipToNext(iter) {\n        var cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return void 0;\n    }\n    return delay(function () { return unfold(trySkipToNext, xs[Symbol.iterator]()); });\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        var cur = void 0;\n        for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done)\n                break;\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (var i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    var iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();\n    var cur1, cur2;\n    for (var i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    var ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    var ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (var i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function forAll(f, xs) {\n    return fold(function (acc, x) { return acc && f(x); }, true, xs);\n}\nexport function forAll2(f, xs, ys) {\n    return fold2(function (acc, x, y) { return acc && f(x, y); }, true, xs, ys);\n}\nexport function tryHead(xs) {\n    var iter = xs[Symbol.iterator]();\n    var cur = iter.next();\n    return cur.done ? null : cur.value;\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(function () {\n        return unfold(function (i) { return i < n ? [f(i), i + 1] : null; }, 0);\n    });\n}\nexport function initializeInfinite(f) {\n    return delay(function () {\n        return unfold(function (i) { return [f(i), i + 1]; }, 0);\n    });\n}\nexport function tryItem(i, xs) {\n    if (i < 0)\n        return null;\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\n        return i < xs.length ? xs[i] : null;\n    for (var j = 0, iter = xs[Symbol.iterator]();; j++) {\n        var cur = iter.next();\n        if (cur.done)\n            return null;\n        if (j === i)\n            return cur.value;\n    }\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold(function (_, x) { return f(x); }, null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2(function (_, x, y) { return f(x, y); }, null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold(function (_, x, i) { return f(i, x); }, null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2(function (_, x, y, i) { return f(i, x, y); }, null, xs, ys);\n}\nexport function isEmpty(xs) {\n    var i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    try {\n        return reduce(function (_, x) { return x; }, xs);\n    }\n    catch (err) {\n        return null;\n    }\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\n// A export function 'length' method causes problems in JavaScript -- https://github.com/Microsoft/TypeScript/issues/442\nexport function count(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold(function (acc, x) { return acc + 1; }, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(function () { return unfold(function (iter) {\n        var cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()); });\n}\nexport function mapIndexed(f, xs) {\n    return delay(function () {\n        var i = 0;\n        return unfold(function (iter) {\n            var cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function map2(f, xs, ys) {\n    return delay(function () {\n        var iter1 = xs[Symbol.iterator]();\n        var iter2 = ys[Symbol.iterator]();\n        return unfold(function () {\n            var cur1 = iter1.next(), cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(function () {\n        var i = 0;\n        var iter1 = xs[Symbol.iterator]();\n        var iter2 = ys[Symbol.iterator]();\n        return unfold(function () {\n            var cur1 = iter1.next(), cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(function () {\n        var iter1 = xs[Symbol.iterator]();\n        var iter2 = ys[Symbol.iterator]();\n        var iter3 = zs[Symbol.iterator]();\n        return unfold(function () {\n            var cur1 = iter1.next(), cur2 = iter2.next(), cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs) {\n    var result = [];\n    var r;\n    var cur;\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done)\n            break;\n        _a = f(acc, cur.value), r = _a[0], acc = _a[1];\n        result.push(r);\n    }\n    return [result, acc];\n    var _a;\n}\nexport function mapFoldBack(f, xs, acc) {\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    var result = [];\n    var r;\n    for (var i = arr.length - 1; i >= 0; i--) {\n        _a = f(arr[i], acc), r = _a[0], acc = _a[1];\n        result.push(r);\n    }\n    return [result, acc];\n    var _a;\n}\nexport function max(xs) {\n    return reduce(function (acc, x) { return compare(acc, x) === 1 ? acc : x; }, xs);\n}\nexport function maxBy(f, xs) {\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === 1 ? acc : x; }, xs);\n}\nexport function min(xs) {\n    return reduce(function (acc, x) { return compare(acc, x) === -1 ? acc : x; }, xs);\n}\nexport function minBy(f, xs) {\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === -1 ? acc : x; }, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan(function (last, next) { return [last[1], next]; }, [0, 0], xs));\n}\nexport function permute(f, xs) {\n    return ofArray(arrayPermute(f, Array.from(xs)));\n}\nexport function rangeStep(first, step, last) {\n    if (step === 0)\n        throw new Error(\"Step cannot be 0\");\n    return delay(function () { return unfold(function (x) { return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null; }, first); });\n}\nexport function rangeChar(first, last) {\n    return delay(function () { return unfold(function (x) { return x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null; }, first); });\n}\nexport function range(first, last) {\n    return rangeStep(first, 1, last);\n}\nexport function readOnly(xs) {\n    return map(function (x) { return x; }, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\n        return xs.reduce(f);\n    var iter = xs[Symbol.iterator]();\n    var cur = iter.next();\n    if (cur.done)\n        throw new Error(\"Seq was empty\");\n    var acc = cur.value;\n    for (;;) {\n        cur = iter.next();\n        if (cur.done)\n            break;\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0)\n        throw new Error(\"Seq was empty\");\n    var acc = ar[ar.length - 1];\n    for (var i = ar.length - 2; i >= 0; i--)\n        acc = f(ar[i], acc, i);\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, function () { return x; });\n}\nexport function reverse(xs) {\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(function () {\n        var iter = xs[Symbol.iterator]();\n        return unfold(function (acc) {\n            if (acc == null)\n                return [seed, seed];\n            var cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan(function (acc, x) { return f(x, acc); }, seed, reverse(xs)));\n}\nexport function singleton(x) {\n    return unfold(function (x) { return x != null ? [x, null] : null; }, x);\n}\nexport function skip(n, xs) {\n    return _a = {},\n        _a[Symbol.iterator] = function () {\n            var iter = xs[Symbol.iterator]();\n            for (var i = 1; i <= n; i++)\n                if (iter.next().done)\n                    throw new Error(\"Seq has not enough elements\");\n            return iter;\n        },\n        _a;\n    var _a;\n}\nexport function skipWhile(f, xs) {\n    return delay(function () {\n        var hasPassed = false;\n        return filter(function (x) { return hasPassed || (hasPassed = !f(x)); }, xs);\n    });\n}\nexport function sortWith(f, xs) {\n    var ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs) {\n    return fold(function (acc, x) { return acc + x; }, 0, xs);\n}\nexport function sumBy(f, xs) {\n    return fold(function (acc, x) { return acc + f(x); }, 0, xs);\n}\nexport function tail(xs) {\n    var iter = xs[Symbol.iterator]();\n    var cur = iter.next();\n    if (cur.done)\n        throw new Error(\"Seq was empty\");\n    return _a = {},\n        _a[Symbol.iterator] = function () { return iter; },\n        _a;\n    var _a;\n}\nexport function take(n, xs, truncate) {\n    if (truncate === void 0) { truncate = false; }\n    return delay(function () {\n        var iter = xs[Symbol.iterator]();\n        return unfold(function (i) {\n            if (i < n) {\n                var cur = iter.next();\n                if (!cur.done)\n                    return [cur.value, i + 1];\n                if (!truncate)\n                    throw new Error(\"Seq has not enough elements\");\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(function () {\n        var iter = xs[Symbol.iterator]();\n        return unfold(function (i) {\n            var cur = iter.next();\n            if (!cur.done && f(cur.value))\n                return [cur.value, null];\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        var cur = iter.next();\n        if (cur.done)\n            return defaultValue === void 0 ? null : defaultValue;\n        if (f(cur.value, i))\n            return cur.value;\n    }\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    var match = null;\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        var cur = iter.next();\n        if (cur.done)\n            return match === null ? (defaultValue === void 0 ? null : defaultValue) : match;\n        if (f(cur.value, i))\n            match = cur.value;\n    }\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        var cur = iter.next();\n        if (cur.done)\n            return null;\n        if (f(cur.value, i))\n            return i;\n    }\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    var match = -1;\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        var cur = iter.next();\n        if (cur.done)\n            return match === -1 ? null : match;\n        if (f(cur.value, i))\n            match = i;\n    }\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n        var cur = iter.next();\n        if (cur.done)\n            break;\n        var y = f(cur.value, i);\n        if (y != null)\n            return y;\n    }\n    return void 0;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, acc) {\n    return _a = {},\n        _a[Symbol.iterator] = function () {\n            return {\n                next: function () {\n                    var res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                }\n            };\n        },\n        _a;\n    var _a;\n}\nexport function zip(xs, ys) {\n    return map2(function (x, y) { return [x, y]; }, xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3(function (x, y, z) { return [x, y, z]; }, xs, ys, zs);\n}\n","import List from \"./ListClass\";\nimport { ofArray as listOfArray } from \"./ListClass\";\nimport { toString } from \"./Util\";\nimport { equals } from \"./Util\";\nimport { compare } from \"./Util\";\nimport GenericComparer from \"./GenericComparer\";\nimport FSymbol from \"./Symbol\";\nimport { map as seqMap } from \"./Seq\";\nimport { fold as seqFold } from \"./Seq\";\nimport { pick as seqPick } from \"./Seq\";\nimport { tryPick as seqTryPick } from \"./Seq\";\nimport { compareWith as seqCompareWith } from \"./Seq\";\n// ----------------------------------------------\n// These functions belong to Seq.ts but are\n// implemented here to prevent cyclic dependencies\nexport function groupBy(f, xs) {\n    var keys = [], iter = xs[Symbol.iterator]();\n    var acc = create(), cur = iter.next();\n    while (!cur.done) {\n        var k = f(cur.value), vs = tryFind(k, acc);\n        if (vs == null) {\n            keys.push(k);\n            acc = add(k, [cur.value], acc);\n        }\n        else {\n            vs.push(cur.value);\n        }\n        cur = iter.next();\n    }\n    return keys.map(function (k) { return [k, acc.get(k)]; });\n}\nexport function countBy(f, xs) {\n    return groupBy(f, xs).map(function (kv) { return [kv[0], kv[1].length]; });\n}\nvar MapTree = (function () {\n    function MapTree(caseName, fields) {\n        this.Case = caseName;\n        this.Fields = fields;\n    }\n    return MapTree;\n}());\nexport { MapTree };\nfunction tree_sizeAux(acc, m) {\n    return m.Case === \"MapOne\"\n        ? acc + 1\n        : m.Case === \"MapNode\"\n            ? tree_sizeAux(tree_sizeAux(acc + 1, m.Fields[2]), m.Fields[3])\n            : acc;\n}\nfunction tree_size(x) {\n    return tree_sizeAux(0, x);\n}\nfunction tree_empty() {\n    return new MapTree(\"MapEmpty\", []);\n}\nfunction tree_height(_arg1) {\n    return _arg1.Case === \"MapOne\" ? 1 : _arg1.Case === \"MapNode\" ? _arg1.Fields[4] : 0;\n}\nfunction tree_isEmpty(m) {\n    return m.Case === \"MapEmpty\" ? true : false;\n}\nfunction tree_mk(l, k, v, r) {\n    var matchValue = [l, r];\n    var $target1 = function () {\n        var hl = tree_height(l);\n        var hr = tree_height(r);\n        var m = hl < hr ? hr : hl;\n        return new MapTree(\"MapNode\", [k, v, l, r, m + 1]);\n    };\n    if (matchValue[0].Case === \"MapEmpty\") {\n        if (matchValue[1].Case === \"MapEmpty\") {\n            return new MapTree(\"MapOne\", [k, v]);\n        }\n        else {\n            return $target1();\n        }\n    }\n    else {\n        return $target1();\n    }\n}\n;\nfunction tree_rebalance(t1, k, v, t2) {\n    var t1h = tree_height(t1);\n    var t2h = tree_height(t2);\n    if (t2h > t1h + 2) {\n        if (t2.Case === \"MapNode\") {\n            if (tree_height(t2.Fields[2]) > t1h + 1) {\n                if (t2.Fields[2].Case === \"MapNode\") {\n                    return tree_mk(tree_mk(t1, k, v, t2.Fields[2].Fields[2]), t2.Fields[2].Fields[0], t2.Fields[2].Fields[1], tree_mk(t2.Fields[2].Fields[3], t2.Fields[0], t2.Fields[1], t2.Fields[3]));\n                }\n                else {\n                    throw new Error(\"rebalance\");\n                }\n            }\n            else {\n                return tree_mk(tree_mk(t1, k, v, t2.Fields[2]), t2.Fields[0], t2.Fields[1], t2.Fields[3]);\n            }\n        }\n        else {\n            throw new Error(\"rebalance\");\n        }\n    }\n    else {\n        if (t1h > t2h + 2) {\n            if (t1.Case === \"MapNode\") {\n                if (tree_height(t1.Fields[3]) > t2h + 1) {\n                    if (t1.Fields[3].Case === \"MapNode\") {\n                        return tree_mk(tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], t1.Fields[3].Fields[2]), t1.Fields[3].Fields[0], t1.Fields[3].Fields[1], tree_mk(t1.Fields[3].Fields[3], k, v, t2));\n                    }\n                    else {\n                        throw new Error(\"rebalance\");\n                    }\n                }\n                else {\n                    return tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], tree_mk(t1.Fields[3], k, v, t2));\n                }\n            }\n            else {\n                throw new Error(\"rebalance\");\n            }\n        }\n        else {\n            return tree_mk(t1, k, v, t2);\n        }\n    }\n}\nfunction tree_add(comparer, k, v, m) {\n    if (m.Case === \"MapOne\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c < 0) {\n            return new MapTree(\"MapNode\", [k, v, new MapTree(\"MapEmpty\", []), m, 2]);\n        }\n        else if (c === 0) {\n            return new MapTree(\"MapOne\", [k, v]);\n        }\n        return new MapTree(\"MapNode\", [k, v, m, new MapTree(\"MapEmpty\", []), 2]);\n    }\n    else if (m.Case === \"MapNode\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c < 0) {\n            return tree_rebalance(tree_add(comparer, k, v, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\n        }\n        else if (c === 0) {\n            return new MapTree(\"MapNode\", [k, v, m.Fields[2], m.Fields[3], m.Fields[4]]);\n        }\n        return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_add(comparer, k, v, m.Fields[3]));\n    }\n    return new MapTree(\"MapOne\", [k, v]);\n}\nfunction tree_find(comparer, k, m) {\n    var res = tree_tryFind(comparer, k, m);\n    if (res != null)\n        return res;\n    throw new Error(\"key not found\");\n}\nfunction tree_tryFind(comparer, k, m) {\n    if (m.Case === \"MapOne\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        return c === 0 ? m.Fields[1] : null;\n    }\n    else if (m.Case === \"MapNode\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c < 0) {\n            return tree_tryFind(comparer, k, m.Fields[2]);\n        }\n        else {\n            if (c === 0) {\n                return m.Fields[1];\n            }\n            else {\n                return tree_tryFind(comparer, k, m.Fields[3]);\n            }\n        }\n    }\n    return null;\n}\nfunction tree_partition1(comparer, f, k, v, acc1, acc2) {\n    return f(k, v) ? [tree_add(comparer, k, v, acc1), acc2] : [acc1, tree_add(comparer, k, v, acc2)];\n}\nfunction tree_partitionAux(comparer, f, s, acc_0, acc_1) {\n    var acc = [acc_0, acc_1];\n    if (s.Case === \"MapOne\") {\n        return tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc[0], acc[1]);\n    }\n    else if (s.Case === \"MapNode\") {\n        var acc_2 = tree_partitionAux(comparer, f, s.Fields[3], acc[0], acc[1]);\n        var acc_3 = tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc_2[0], acc_2[1]);\n        return tree_partitionAux(comparer, f, s.Fields[2], acc_3[0], acc_3[1]);\n    }\n    return acc;\n}\nfunction tree_partition(comparer, f, s) {\n    return tree_partitionAux(comparer, f, s, tree_empty(), tree_empty());\n}\nfunction tree_filter1(comparer, f, k, v, acc) {\n    return f(k, v) ? tree_add(comparer, k, v, acc) : acc;\n}\nfunction tree_filterAux(comparer, f, s, acc) {\n    return s.Case === \"MapOne\" ? tree_filter1(comparer, f, s.Fields[0], s.Fields[1], acc) : s.Case === \"MapNode\" ? (function () {\n        var acc_1 = tree_filterAux(comparer, f, s.Fields[2], acc);\n        var acc_2 = tree_filter1(comparer, f, s.Fields[0], s.Fields[1], acc_1);\n        return tree_filterAux(comparer, f, s.Fields[3], acc_2);\n    })() : acc;\n}\nfunction tree_filter(comparer, f, s) {\n    return tree_filterAux(comparer, f, s, tree_empty());\n}\nfunction tree_spliceOutSuccessor(m) {\n    if (m.Case === \"MapOne\") {\n        return [m.Fields[0], m.Fields[1], new MapTree(\"MapEmpty\", [])];\n    }\n    else if (m.Case === \"MapNode\") {\n        if (m.Fields[2].Case === \"MapEmpty\") {\n            return [m.Fields[0], m.Fields[1], m.Fields[3]];\n        }\n        else {\n            var kvl = tree_spliceOutSuccessor(m.Fields[2]);\n            return [kvl[0], kvl[1], tree_mk(kvl[2], m.Fields[0], m.Fields[1], m.Fields[3])];\n        }\n    }\n    throw new Error(\"internal error: Map.spliceOutSuccessor\");\n}\nfunction tree_remove(comparer, k, m) {\n    if (m.Case === \"MapOne\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c === 0) {\n            return new MapTree(\"MapEmpty\", []);\n        }\n        else {\n            return m;\n        }\n    }\n    else if (m.Case === \"MapNode\") {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c < 0) {\n            return tree_rebalance(tree_remove(comparer, k, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\n        }\n        else {\n            if (c === 0) {\n                var matchValue = [m.Fields[2], m.Fields[3]];\n                if (matchValue[0].Case === \"MapEmpty\") {\n                    return m.Fields[3];\n                }\n                else {\n                    if (matchValue[1].Case === \"MapEmpty\") {\n                        return m.Fields[2];\n                    }\n                    else {\n                        var patternInput = tree_spliceOutSuccessor(m.Fields[3]);\n                        var sv = patternInput[1];\n                        var sk = patternInput[0];\n                        var r_ = patternInput[2];\n                        return tree_mk(m.Fields[2], sk, sv, r_);\n                    }\n                }\n            }\n            else {\n                return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_remove(comparer, k, m.Fields[3]));\n            }\n        }\n    }\n    else {\n        return tree_empty();\n    }\n}\nfunction tree_mem(comparer, k, m) {\n    return m.Case === \"MapOne\" ? comparer.Compare(k, m.Fields[0]) === 0 : m.Case === \"MapNode\" ? (function () {\n        var c = comparer.Compare(k, m.Fields[0]);\n        if (c < 0) {\n            return tree_mem(comparer, k, m.Fields[2]);\n        }\n        else {\n            if (c === 0) {\n                return true;\n            }\n            else {\n                return tree_mem(comparer, k, m.Fields[3]);\n            }\n        }\n    })() : false;\n}\nfunction tree_iter(f, m) {\n    if (m.Case === \"MapOne\") {\n        f(m.Fields[0], m.Fields[1]);\n    }\n    else if (m.Case === \"MapNode\") {\n        tree_iter(f, m.Fields[2]);\n        f(m.Fields[0], m.Fields[1]);\n        tree_iter(f, m.Fields[3]);\n    }\n}\nfunction tree_tryPick(f, m) {\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (function () {\n        var matchValue = tree_tryPick(f, m.Fields[2]);\n        if (matchValue == null) {\n            var matchValue_1 = f(m.Fields[0], m.Fields[1]);\n            if (matchValue_1 == null) {\n                return tree_tryPick(f, m.Fields[3]);\n            }\n            else {\n                var res = matchValue_1;\n                return res;\n            }\n        }\n        else {\n            var res = matchValue;\n            return res;\n        }\n    })() : null;\n}\nfunction tree_exists(f, m) {\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_exists(f, m.Fields[2]) ? true : f(m.Fields[0], m.Fields[1])) ? true : tree_exists(f, m.Fields[3]) : false;\n}\nfunction tree_forall(f, m) {\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_forall(f, m.Fields[2]) ? f(m.Fields[0], m.Fields[1]) : false) ? tree_forall(f, m.Fields[3]) : false : true;\n}\n// function tree_map(f: (v:any) => any, m: MapTree): MapTree {\n//   return m.Case === \"MapOne\" ? new MapTree(\"MapOne\", [m.Fields[0], f(m.Fields[1])]) : m.Case === \"MapNode\" ? (() => {\n//     var l2 = tree_map(f, m.Fields[2]);\n//     var v2 = f(m.Fields[1]);\n//     var r2 = tree_map(f, m.Fields[3]);\n//     return new MapTree(\"MapNode\", [m.Fields[0], v2, l2, r2, m.Fields[4]]);\n//   })() : tree_empty();\n// }\nfunction tree_mapi(f, m) {\n    return m.Case === \"MapOne\" ? new MapTree(\"MapOne\", [m.Fields[0], f(m.Fields[0], m.Fields[1])]) : m.Case === \"MapNode\" ? (function () {\n        var l2 = tree_mapi(f, m.Fields[2]);\n        var v2 = f(m.Fields[0], m.Fields[1]);\n        var r2 = tree_mapi(f, m.Fields[3]);\n        return new MapTree(\"MapNode\", [m.Fields[0], v2, l2, r2, m.Fields[4]]);\n    })() : tree_empty();\n}\nfunction tree_foldBack(f, m, x) {\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1], x) : m.Case === \"MapNode\" ? (function () {\n        var x_1 = tree_foldBack(f, m.Fields[3], x);\n        var x_2 = f(m.Fields[0], m.Fields[1], x_1);\n        return tree_foldBack(f, m.Fields[2], x_2);\n    })() : x;\n}\nfunction tree_fold(f, x, m) {\n    return m.Case === \"MapOne\" ? f(x, m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (function () {\n        var x_1 = tree_fold(f, x, m.Fields[2]);\n        var x_2 = f(x_1, m.Fields[0], m.Fields[1]);\n        return tree_fold(f, x_2, m.Fields[3]);\n    })() : x;\n}\n// function tree_foldFromTo(comparer: IComparer<any>, lo: any, hi: any, f: (k:any, v:any, acc: any) => any, m: MapTree, x: any): any {\n//   if (m.Case === \"MapOne\") {\n//     var cLoKey = comparer.Compare(lo, m.Fields[0]);\n//     var cKeyHi = comparer.Compare(m.Fields[0], hi);\n//     var x_1 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f(m.Fields[0], m.Fields[1], x) : x;\n//     return x_1;\n//   }\n//   else if (m.Case === \"MapNode\") {\n//     var cLoKey = comparer.Compare(lo, m.Fields[0]);\n//     var cKeyHi = comparer.Compare(m.Fields[0], hi);\n//     var x_1 = cLoKey < 0 ? tree_foldFromTo(comparer, lo, hi, f, m.Fields[2], x) : x;\n//     var x_2 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f(m.Fields[0], m.Fields[1], x_1) : x_1;\n//     var x_3 = cKeyHi < 0 ? tree_foldFromTo(comparer, lo, hi, f, m.Fields[3], x_2) : x_2;\n//     return x_3;\n//   }\n//   return x;\n// }\n// function tree_foldSection(comparer: IComparer<any>, lo: any, hi: any, f: (k:any, v:any, acc: any) => any, m: MapTree, x: any) {\n//   return comparer.Compare(lo, hi) === 1 ? x : tree_foldFromTo(comparer, lo, hi, f, m, x);\n// }\n// function tree_loop(m: MapTree, acc: any): List<[any,any]> {\n//   return m.Case === \"MapOne\"\n//     ? new List([m.Fields[0], m.Fields[1]], acc)\n//     : m.Case === \"MapNode\"\n//       ? tree_loop(m.Fields[2], new List([m.Fields[0], m.Fields[1]], tree_loop(m.Fields[3], acc)))\n//       : acc;\n// }\n// function tree_toList(m: MapTree) {\n//   return tree_loop(m, new List());\n// }\n// function tree_toArray(m: MapTree) {\n//   return Array.from(tree_toList(m));\n// }\n// function tree_ofList(comparer: IComparer<any>, l: List<[any,any]>) {\n//   return Seq.fold((acc: MapTree, tupledArg: [any, any]) => {\n//     return tree_add(comparer, tupledArg[0], tupledArg[1], acc);\n//   }, tree_empty(), l);\n// }\nfunction tree_mkFromEnumerator(comparer, acc, e) {\n    var cur = e.next();\n    while (!cur.done) {\n        acc = tree_add(comparer, cur.value[0], cur.value[1], acc);\n        cur = e.next();\n    }\n    return acc;\n}\n// function tree_ofArray(comparer: IComparer<any>, arr: ArrayLike<[any,any]>) {\n//   var res = tree_empty();\n//   for (var i = 0; i <= arr.length - 1; i++) {\n//     res = tree_add(comparer, arr[i][0], arr[i][1], res);\n//   }\n//   return res;\n// }\nfunction tree_ofSeq(comparer, c) {\n    var ie = c[Symbol.iterator]();\n    return tree_mkFromEnumerator(comparer, tree_empty(), ie);\n}\n// function tree_copyToArray(s: MapTree, arr: ArrayLike<any>, i: number) {\n//   tree_iter((x, y) => { arr[i++] = [x, y]; }, s);\n// }\nfunction tree_collapseLHS(stack) {\n    if (stack.tail != null) {\n        if (stack.head.Case === \"MapOne\") {\n            return stack;\n        }\n        else if (stack.head.Case === \"MapNode\") {\n            return tree_collapseLHS(listOfArray([\n                stack.head.Fields[2],\n                new MapTree(\"MapOne\", [stack.head.Fields[0], stack.head.Fields[1]]),\n                stack.head.Fields[3]\n            ], stack.tail));\n        }\n        else {\n            return tree_collapseLHS(stack.tail);\n        }\n    }\n    else {\n        return new List();\n    }\n}\nfunction tree_mkIterator(s) {\n    return { stack: tree_collapseLHS(new List(s, new List())), started: false };\n}\nfunction tree_moveNext(i) {\n    function current(i) {\n        if (i.stack.tail == null) {\n            return null;\n        }\n        else if (i.stack.head.Case === \"MapOne\") {\n            return [i.stack.head.Fields[0], i.stack.head.Fields[1]];\n        }\n        throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n    if (i.started) {\n        if (i.stack.tail == null) {\n            return { done: true, value: null };\n        }\n        else {\n            if (i.stack.head.Case === \"MapOne\") {\n                i.stack = tree_collapseLHS(i.stack.tail);\n                return {\n                    done: i.stack.tail == null,\n                    value: current(i)\n                };\n            }\n            else {\n                throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n            }\n        }\n    }\n    else {\n        i.started = true;\n        return {\n            done: i.stack.tail == null,\n            value: current(i)\n        };\n    }\n    ;\n}\nvar FMap = (function () {\n    /** Do not call, use Map.create instead. */\n    function FMap() {\n    }\n    FMap.prototype.ToString = function () {\n        return \"map [\" + Array.from(this).map(toString).join(\"; \") + \"]\";\n    };\n    FMap.prototype.Equals = function (m2) {\n        return this.CompareTo(m2) === 0;\n    };\n    FMap.prototype.CompareTo = function (m2) {\n        var _this = this;\n        return this === m2 ? 0 : seqCompareWith(function (kvp1, kvp2) {\n            var c = _this.comparer.Compare(kvp1[0], kvp2[0]);\n            return c !== 0 ? c : compare(kvp1[1], kvp2[1]);\n        }, this, m2);\n    };\n    FMap.prototype[Symbol.iterator] = function () {\n        var i = tree_mkIterator(this.tree);\n        return {\n            next: function () { return tree_moveNext(i); }\n        };\n    };\n    FMap.prototype.entries = function () {\n        return this[Symbol.iterator]();\n    };\n    FMap.prototype.keys = function () {\n        return seqMap(function (kv) { return kv[0]; }, this);\n    };\n    FMap.prototype.values = function () {\n        return seqMap(function (kv) { return kv[1]; }, this);\n    };\n    FMap.prototype.get = function (k) {\n        return tree_find(this.comparer, k, this.tree);\n    };\n    FMap.prototype.has = function (k) {\n        return tree_mem(this.comparer, k, this.tree);\n    };\n    /** Not supported */\n    FMap.prototype.set = function (k, v) {\n        throw new Error(\"not supported\");\n    };\n    /** Not supported */\n    FMap.prototype.delete = function (k) {\n        throw new Error(\"not supported\");\n    };\n    /** Not supported */\n    FMap.prototype.clear = function () {\n        throw new Error(\"not supported\");\n    };\n    Object.defineProperty(FMap.prototype, \"size\", {\n        get: function () {\n            return tree_size(this.tree);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FMap.prototype[FSymbol.reflection] = function () {\n        return {\n            type: \"Microsoft.FSharp.Collections.FSharpMap\",\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\n        };\n    };\n    return FMap;\n}());\nexport default FMap;\nfunction from(comparer, tree) {\n    var map = new FMap();\n    map.tree = tree;\n    map.comparer = comparer || new GenericComparer();\n    return map;\n}\nexport function create(ie, comparer) {\n    comparer = comparer || new GenericComparer();\n    return from(comparer, ie ? tree_ofSeq(comparer, ie) : tree_empty());\n}\nexport function add(k, v, map) {\n    return from(map.comparer, tree_add(map.comparer, k, v, map.tree));\n}\nexport function remove(item, map) {\n    return from(map.comparer, tree_remove(map.comparer, item, map.tree));\n}\nexport function containsValue(v, map) {\n    return seqFold(function (acc, k) { return acc || equals(map.get(k), v); }, false, map.keys());\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function exists(f, map) {\n    return tree_exists(f, map.tree);\n}\nexport function find(k, map) {\n    return tree_find(map.comparer, k, map.tree);\n}\nexport function tryFind(k, map) {\n    return tree_tryFind(map.comparer, k, map.tree);\n}\nexport function filter(f, map) {\n    return from(map.comparer, tree_filter(map.comparer, f, map.tree));\n}\nexport function fold(f, seed, map) {\n    return tree_fold(f, seed, map.tree);\n}\nexport function foldBack(f, map, seed) {\n    return tree_foldBack(f, map.tree, seed);\n}\nexport function forAll(f, map) {\n    return tree_forall(f, map.tree);\n}\nexport function isEmpty(map) {\n    return tree_isEmpty(map.tree);\n}\nexport function iterate(f, map) {\n    tree_iter(f, map.tree);\n}\nexport function map(f, map) {\n    return from(map.comparer, tree_mapi(f, map.tree));\n}\nexport function partition(f, map) {\n    var rs = tree_partition(map.comparer, f, map.tree);\n    return [from(map.comparer, rs[0]), from(map.comparer, rs[1])];\n}\nexport function findKey(f, map) {\n    return seqPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\n}\nexport function tryFindKey(f, map) {\n    return seqTryPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\n}\nexport function pick(f, map) {\n    var res = tryPick(f, map);\n    if (res != null)\n        return res;\n    throw new Error(\"key not found\");\n}\nexport function tryPick(f, map) {\n    return tree_tryPick(f, map.tree);\n}\n","import List from \"./ListClass\";\nimport { map as seqMap } from \"./Seq\";\nimport { fold as seqFold } from \"./Seq\";\nimport { foldBack as seqFoldBack } from \"./Seq\";\nimport { toList as seqToList } from \"./Seq\";\nimport { groupBy as mapGroupBy } from \"./Map\";\nexport default List;\nexport { ofArray } from \"./ListClass\";\nexport function append(xs, ys) {\n    return seqFold(function (acc, x) { return new List(x, acc); }, ys, reverse(xs));\n}\nexport function choose(f, xs) {\n    var r = seqFold(function (acc, x) {\n        var y = f(x);\n        return y != null ? new List(y, acc) : acc;\n    }, new List(), xs);\n    return reverse(r);\n}\nexport function collect(f, xs) {\n    return seqFold(function (acc, x) { return append(acc, f(x)); }, new List(), xs);\n}\n// TODO: should be xs: Iterable<List<T>>\nexport function concat(xs) {\n    return collect(function (x) { return x; }, xs);\n}\nexport function filter(f, xs) {\n    return reverse(seqFold(function (acc, x) { return f(x) ? new List(x, acc) : acc; }, new List(), xs));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"List length must be non-negative\");\n    }\n    var xs = new List();\n    for (var i = 1; i <= n; i++) {\n        xs = new List(f(n - i), xs);\n    }\n    return xs;\n}\nexport function map(f, xs) {\n    return reverse(seqFold(function (acc, x) { return new List(f(x), acc); }, new List(), xs));\n}\nexport function mapIndexed(f, xs) {\n    return reverse(seqFold(function (acc, x, i) { return new List(f(i, x), acc); }, new List(), xs));\n}\nexport function partition(f, xs) {\n    return seqFold(function (acc, x) {\n        var lacc = acc[0], racc = acc[1];\n        return f(x) ? [new List(x, lacc), racc] : [lacc, new List(x, racc)];\n    }, [new List(), new List()], reverse(xs));\n}\nexport function replicate(n, x) {\n    return initialize(n, function () { return x; });\n}\nexport function reverse(xs) {\n    return seqFold(function (acc, x) { return new List(x, acc); }, new List(), xs);\n}\nexport function singleton(x) {\n    return new List(x, new List());\n}\nexport function slice(lower, upper, xs) {\n    var noLower = (lower == null);\n    var noUpper = (upper == null);\n    return reverse(seqFold(function (acc, x, i) { return (noLower || lower <= i) && (noUpper || i <= upper) ? new List(x, acc) : acc; }, new List(), xs));\n}\n/* ToDo: instance unzip() */\nexport function unzip(xs) {\n    return seqFoldBack(function (xy, acc) {\n        return [new List(xy[0], acc[0]), new List(xy[1], acc[1])];\n    }, xs, [new List(), new List()]);\n}\n/* ToDo: instance unzip3() */\nexport function unzip3(xs) {\n    return seqFoldBack(function (xyz, acc) {\n        return [new List(xyz[0], acc[0]), new List(xyz[1], acc[1]), new List(xyz[2], acc[2])];\n    }, xs, [new List(), new List(), new List()]);\n}\nexport function groupBy(f, xs) {\n    return seqToList(seqMap(function (k) { return [k[0], seqToList(k[1])]; }, mapGroupBy(f, xs)));\n}\n","﻿// Module that defines the instruction types and state\n\nnamespace Common\nmodule State =\n    \n    (*** STATE ***)\n\n    /// Represents the Machine State.\n    type StateHandle = S of Regs:int [] * N:bool * Z:bool * C:bool * S:bool * Mem:Map<int,int>\n\n    // Functions to access and modify state.\n\n    /// Creates default state.\n    let initState =\n        let regs = Array.create 16 0\n        S(regs, false, false, false, false, Map.empty)\n\n    /// Creates state for testing with visual - R13 initialized to 0xFF00000.\n    let initStateVisual =\n        let regs0to12 = Array.create 13 0\n        let regs13to15 = [|0xFF000000;0;0|]\n        let regs = Array.concat [regs0to12; regs13to15]\n\n        S(regs, false, false, false, false, Map.empty)\n\n    /// Read a register in the state.\n    let readReg r (S(reg,_,_,_,_,_): StateHandle) =\n        reg.[r]\n\n    /// Write a value to a register in the state.\n    let writeReg r v (S(reg,n,z,c,s,mem): StateHandle) =\n        let newRegs = Array.mapi (fun i x -> if r = i then v else x) reg\n        S(newRegs,n,z,c,s,mem)\n\n    /// Write a value to a register in the state and update status flags.\n    (*let writeRegFlags r v r1 r2 (S(reg,n,z,c,s,mem): StateHandle) =\n        let newRegs = Array.mapi (fun i x -> if r = i then v else x) reg\n        match v with\n        | x when (x < r1) && (x < r2) ->  *)\n\n    /// Read the value in the Program Counter.\n    let readPC (S(reg,_,_,_,_,_): StateHandle) =\n        reg.[15]\n\n    /// Write a value to the Program Counter.\n    let writePC v (S(reg,n,z,c,s,mem): StateHandle) =\n        let newRegs = Array.mapi (fun i x -> if i = 15 then v else x) reg\n        S(newRegs,n,z,c,s,mem)\n\n    /// Increment the Program Counter by 4.\n    let incPC (S(reg,n,z,c,s,mem): StateHandle) =\n        let newRegs = Array.mapi (fun i x -> if i = 15 then x+4 else x) reg\n        S(newRegs,n,z,c,s,mem)\n\n    /// Retrieve negative flag.\n    let readNFlag (S(_,n,_,_,_,_): StateHandle) = n\n\n    /// Retrieve zero flag.\n    let readZFlag (S(_,_,z,_,_,_): StateHandle) = z\n\n    /// Retrieve carry flag.\n    let readCFlag (S(_,_,_,c,_,_): StateHandle) = c\n    \n    /// Retrieve overflow flag.\n    let readVFlag (S(_,_,_,_,v,_): StateHandle) = v\n    \n    /// Write negative flag.\n    let writeNFlag n (S(reg,_,z,c,v,mem): StateHandle) =\n        S(reg,n,z,c,v,mem)\n\n    /// Write zero flag.\n    let writeZFlag z (S(reg,n,_,c,v,mem): StateHandle) =\n        S(reg,n,z,c,v,mem)\n\n    /// Write carry flag.\n    let writeCFlag c (S(reg,n,z,_,v,mem): StateHandle) =\n        S(reg,n,z,c,v,mem)\n    \n    /// Write overflow flag.\n    let writeVFlag v (S(reg,n,z,c,_,mem): StateHandle) =\n        S(reg,n,z,c,v,mem)\n\n    /// Read from a memory address.\n    let readMem addr (S(_,_,_,_,_,mem): StateHandle) =\n        match Map.tryFind addr mem with\n        | Some(v) -> v\n        | None -> 0\n\n    /// Write to a memory address.\n    let writeMem addr v (S(reg,n,z,c,s,mem): StateHandle) =\n        let newMem = Map.add addr v mem\n        S(reg,n,z,c,s,newMem)\n\n    /// Debug. Returns tuple of (Registers * Flags)\n    let readState (S(reg,n,z,c,v,_): StateHandle) =\n        (reg, [n;z;c;v])","export function saveCodeMirror(myEditor)\n{\n\tmyEditor.save();\n\treturn document.getElementById(\"editor\").value;\n}\n\nexport function initializeCodeMirror() {\n\tvar editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n\t\t\tlineNumbers: true\n\t\t});\n\treturn editor\n}\n\nexport function highlightLine(lineNumber,myEditor,colour) {\n\tvar actualLine = lineNumber - 1\n\tif(colour == 1) {\n\t\tvar actualLine = lineNumber - 1\n\t\tmyEditor.addLineClass(actualLine, 'background', 'error');\n\t}\n\tif(colour == 2) {\n\t\tvar actualLine = lineNumber - 1\n\t\tmyEditor.addLineClass(actualLine, 'background', 'select');\n\t}\n\tmyEditor.refresh();\n}\n\nexport function clearAllLines(myEditor) {\n\tconsole.log(myEditor.lineCount())\n\tfor (var i = 0; i < myEditor.lineCount(); i++) {\n\t\tmyEditor.removeLineClass(i, 'background', 'error');\n\t\tmyEditor.removeLineClass(i, 'background', 'select')\n\t}\n\tmyEditor.refresh();\n}\n\n\nexport function readFromConsole() {\n\tconst readline = require('readline');\n\treturn readline()\n}","export function create(pattern, options) {\n    var flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\";\n    flags += options & 2 ? \"m\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options) {\n    if (options === void 0) { options = 0; }\n    var reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options) {\n    if (options === void 0) { options = 0; }\n    var reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options) {\n    if (options === void 0) { options = 0; }\n    var reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global)\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    var m;\n    var matches = [];\n    while ((m = reg.exec(str)) !== null)\n        matches.push(m);\n    return matches;\n}\nexport function options(reg) {\n    var options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset) {\n    if (offset === void 0) { offset = 0; }\n    function replacer() {\n        var res = arguments[0];\n        if (limit !== 0) {\n            limit--;\n            var match_1 = [];\n            var len = arguments.length;\n            for (var i = 0; i < len - 2; i++)\n                match_1.push(arguments[i]);\n            match_1.index = arguments[len - 2];\n            match_1.input = arguments[len - 1];\n            res = replacement(match_1);\n        }\n        return res;\n    }\n    if (typeof reg == \"string\") {\n        var tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement == \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        if (limit != null) {\n            var m = void 0;\n            var sub1 = input.substring(offset);\n            var _matches = matches(reg, sub1);\n            var sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset) {\n    if (offset === void 0) { offset = 0; }\n    if (typeof reg == \"string\") {\n        var tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","// Source: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * @class A Long class for representing a 64 bit two's-complement integer value.\n */\nvar Long = (function () {\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     */\n    function Long(low, high, unsigned) {\n        /**\n         * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.eq = this.equals;\n        /**\n         * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.neq = this.notEquals;\n        /**\n         * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.lt = this.lessThan;\n        /**\n         * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.lte = this.lessThanOrEqual;\n        /**\n         * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.gt = this.greaterThan;\n        /**\n         * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n         * @param {!Long|number|string} other Other value\n         * @returns {boolean}\n         */\n        this.gte = this.greaterThanOrEqual;\n        /**\n         * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n         * @param {!Long|number|string} other Other value\n         * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n         *  if the given one is greater\n         */\n        this.comp = this.compare;\n        /**\n         * Negates this Long's value. This is an alias of {@link Long#negate}.\n         * @returns {!Long} Negated Long\n         */\n        this.neg = this.negate;\n        /**\n         * Returns this Long's absolute value. This is an alias of {@link Long#absolute}.\n         * @returns {!Long} Absolute Long\n         */\n        this.abs = this.absolute;\n        /**\n         * Returns the difference of this and the specified  This is an alias of {@link Long#subtract}.\n         * @param {!Long|number|string} subtrahend Subtrahend\n         * @returns {!Long} Difference\n         */\n        this.sub = this.subtract;\n        /**\n         * Returns the product of this and the specified  This is an alias of {@link Long#multiply}.\n         * @param {!Long|number|string} multiplier Multiplier\n         * @returns {!Long} Product\n         */\n        this.mul = this.multiply;\n        /**\n         * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n         * @param {!Long|number|string} divisor Divisor\n         * @returns {!Long} Quotient\n         */\n        this.div = this.divide;\n        /**\n         * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n         * @param {!Long|number|string} divisor Divisor\n         * @returns {!Long} Remainder\n         */\n        this.mod = this.modulo;\n        /**\n         * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n         * @param {number|!Long} numBits Number of bits\n         * @returns {!Long} Shifted Long\n         */\n        this.shl = this.shiftLeft;\n        /**\n         * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n         * @param {number|!Long} numBits Number of bits\n         * @returns {!Long} Shifted Long\n         */\n        this.shr = this.shiftRight;\n        /**\n         * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n         * @param {number|!Long} numBits Number of bits\n         * @returns {!Long} Shifted Long\n         */\n        this.shru = this.shiftRightUnsigned;\n        // Aliases for compatibility with Fable\n        this.Equals = this.equals;\n        this.CompareTo = this.compare;\n        this.low = low | 0;\n        this.high = high | 0;\n        this.unsigned = !!unsigned;\n    }\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @returns {number}\n     */\n    Long.prototype.toInt = function () {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     */\n    Long.prototype.toNumber = function () {\n        if (this.unsigned)\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     */\n    Long.prototype.toString = function (radix) {\n        if (radix === void 0) { radix = 10; }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) {\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            }\n            else\n                return '-' + this.neg().toString(radix);\n        }\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero())\n                return digits + result;\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    };\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     */\n    Long.prototype.getHighBits = function () {\n        return this.high;\n    };\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @returns {number} Unsigned high bits\n     */\n    Long.prototype.getHighBitsUnsigned = function () {\n        return this.high >>> 0;\n    };\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     */\n    Long.prototype.getLowBits = function () {\n        return this.low;\n    };\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @returns {number} Unsigned low bits\n     */\n    Long.prototype.getLowBitsUnsigned = function () {\n        return this.low >>> 0;\n    };\n    /**\n     * Gets the number of bits needed to represent the absolute value of this\n     * @returns {number}\n     */\n    Long.prototype.getNumBitsAbs = function () {\n        if (this.isNegative())\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) != 0)\n                break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n    /**\n     * Tests if this Long's value equals zero.\n     * @returns {boolean}\n     */\n    Long.prototype.isZero = function () {\n        return this.high === 0 && this.low === 0;\n    };\n    /**\n     * Tests if this Long's value is negative.\n     * @returns {boolean}\n     */\n    Long.prototype.isNegative = function () {\n        return !this.unsigned && this.high < 0;\n    };\n    /**\n     * Tests if this Long's value is positive.\n     * @returns {boolean}\n     */\n    Long.prototype.isPositive = function () {\n        return this.unsigned || this.high >= 0;\n    };\n    /**\n     * Tests if this Long's value is odd.\n     * @returns {boolean}\n     */\n    Long.prototype.isOdd = function () {\n        return (this.low & 1) === 1;\n    };\n    /**\n     * Tests if this Long's value is even.\n     * @returns {boolean}\n     */\n    Long.prototype.isEven = function () {\n        return (this.low & 1) === 0;\n    };\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.equals = function (other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    };\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.notEquals = function (other) {\n        return !this.eq(/* validates */ other);\n    };\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.lessThan = function (other) {\n        return this.comp(/* validates */ other) < 0;\n    };\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.lessThanOrEqual = function (other) {\n        return this.comp(/* validates */ other) <= 0;\n    };\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.greaterThan = function (other) {\n        return this.comp(/* validates */ other) > 0;\n    };\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    Long.prototype.greaterThanOrEqual = function (other) {\n        return this.comp(/* validates */ other) >= 0;\n    };\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    Long.prototype.compare = function (other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.eq(other))\n            return 0;\n        var thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n    };\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     */\n    Long.prototype.negate = function () {\n        if (!this.unsigned && this.eq(MIN_VALUE))\n            return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n    /**\n     * Returns this Long's absolute value.\n     * @returns {!Long} Absolute Long\n     */\n    Long.prototype.absolute = function () {\n        if (!this.unsigned && this.isNegative())\n            return this.negate();\n        else\n            return this;\n    };\n    /**\n     * Returns the sum of this and the specified\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    Long.prototype.add = function (addend) {\n        if (!isLong(addend))\n            addend = fromValue(addend);\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n    /**\n     * Returns the difference of this and the specified\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    Long.prototype.subtract = function (subtrahend) {\n        if (!isLong(subtrahend))\n            subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n    /**\n     * Returns the product of this and the specified\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    Long.prototype.multiply = function (multiplier) {\n        if (this.isZero())\n            return ZERO;\n        if (!isLong(multiplier))\n            multiplier = fromValue(multiplier);\n        if (multiplier.isZero())\n            return ZERO;\n        if (this.eq(MIN_VALUE))\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE))\n            return this.isOdd() ? MIN_VALUE : ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        }\n        else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    Long.prototype.divide = function (divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        if (divisor.isZero())\n            throw Error('division by zero');\n        if (this.isZero())\n            return this.unsigned ? UZERO : ZERO;\n        var approx = 0, rem = ZERO, res = ZERO;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n                    return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE))\n                    return ONE;\n                else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    var approx_1 = halfThis.div(divisor).shl(1);\n                    if (approx_1.eq(ZERO)) {\n                        return divisor.isNegative() ? ONE : NEG_ONE;\n                    }\n                    else {\n                        rem = this.sub(divisor.mul(approx_1));\n                        res = approx_1.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            }\n            else if (divisor.eq(MIN_VALUE))\n                return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            }\n            else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = ZERO;\n        }\n        else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return UZERO;\n            if (divisor.gt(this.shru(1)))\n                return UONE;\n            res = UZERO;\n        }\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero())\n                approxRes = ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    Long.prototype.modulo = function (divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n    ;\n    /**\n     * Returns the bitwise NOT of this\n     * @returns {!Long}\n     */\n    Long.prototype.not = function () {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n    ;\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    Long.prototype.and = function (other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    Long.prototype.or = function (other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    Long.prototype.xor = function (other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    Long.prototype.shiftLeft = function (numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits = numBits & 63;\n        if (numBits === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    Long.prototype.shiftRight = function (numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits = numBits & 63;\n        if (numBits === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    Long.prototype.shiftRightUnsigned = function (numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits = numBits & 63;\n        if (numBits === 0)\n            return this;\n        else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            }\n            else if (numBits === 32)\n                return fromBits(high, 0, this.unsigned);\n            else\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    };\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     */\n    Long.prototype.toSigned = function () {\n        if (!this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, false);\n    };\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     */\n    Long.prototype.toUnsigned = function () {\n        if (this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, true);\n    };\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {!Array.<number>} Byte representation\n     */\n    Long.prototype.toBytes = function (le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    };\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    Long.prototype.toBytesLE = function () {\n        var hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            (lo >>> 8) & 0xff,\n            (lo >>> 16) & 0xff,\n            (lo >>> 24) & 0xff,\n            hi & 0xff,\n            (hi >>> 8) & 0xff,\n            (hi >>> 16) & 0xff,\n            (hi >>> 24) & 0xff\n        ];\n    };\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    Long.prototype.toBytesBE = function () {\n        var hi = this.high, lo = this.low;\n        return [\n            (hi >>> 24) & 0xff,\n            (hi >>> 16) & 0xff,\n            (hi >>> 8) & 0xff,\n            hi & 0xff,\n            (lo >>> 24) & 0xff,\n            (lo >>> 16) & 0xff,\n            (lo >>> 8) & 0xff,\n            lo & 0xff\n        ];\n    };\n    return Long;\n}());\nexport { Long };\n// A cache of the Long representations of small integer values.\nvar INT_CACHE = {};\n// A cache of the Long representations of small unsigned integer values.\nvar UINT_CACHE = {};\n/**\n * Tests if the specified object is a\n * @param {*} obj Object\n * @returns {boolean}\n */\nexport function isLong(obj) {\n    return (obj && obj instanceof Long);\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n * @returns {!Long} The corresponding Long value\n */\nexport function fromInt(value, unsigned) {\n    if (unsigned === void 0) { unsigned = false; }\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n * @returns {!Long} The corresponding Long value\n */\nexport function fromNumber(value, unsigned) {\n    if (unsigned === void 0) { unsigned = false; }\n    if (isNaN(value) || !isFinite(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return fromNumber(-value, unsigned).neg();\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n * @returns {!Long} The corresponding Long value\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Used 4 times (4*8 to 15+4)\nexport function fromString(str, unsigned, radix) {\n    if (unsigned === void 0) { unsigned = false; }\n    if (radix === void 0) { radix = 10; }\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return fromString(str.substring(1), unsigned, radix).neg();\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = result.mul(power).add(fromNumber(value));\n        }\n        else {\n            result = result.mul(radixToPower);\n            result = result.add(fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Converts the specified value to a\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @returns {!Long}\n */\nexport function fromValue(val) {\n    if (val /* is compatible */ instanceof Long)\n        return val;\n    if (typeof val === 'number')\n        return fromNumber(val);\n    if (typeof val === 'string')\n        return fromString(val);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, val.unsigned);\n}\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\nvar TWO_PWR_16_DBL = 1 << 16;\nvar TWO_PWR_24_DBL = 1 << 24;\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * Signed zero.\n * @type {!Long}\n */\nexport var ZERO = fromInt(0);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Signed one.\n * @type {!Long}\n */\nexport var ONE = fromInt(1);\n/**\n * Unsigned one.\n * @type {!Long}\n */\nexport var UONE = fromInt(1, true);\n/**\n * Signed negative one.\n * @type {!Long}\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n","import { compare as utilCompare } from \"./Util\";\nimport * as Long from \"./Long\";\nexport function create(d, h, m, s, ms) {\n    if (d === void 0) { d = 0; }\n    if (h === void 0) { h = 0; }\n    if (m === void 0) { m = 0; }\n    if (s === void 0) { s = 0; }\n    if (ms === void 0) { ms = 0; }\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            d = arguments[0], h = arguments[1], m = arguments[2], s = arguments[3], ms = arguments[4] || 0;\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return ticks.div(10000).toNumber();\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return Math.floor(ts / 86400000);\n}\nexport function hours(ts) {\n    return Math.floor(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return Math.floor(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return Math.floor(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return Math.floor(ts % 1000);\n}\nexport function ticks(ts) {\n    return Long.fromNumber(ts).mul(10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport function compare(x, y) {\n    return utilCompare(x, y);\n}\nexport function compareTo(x, y) {\n    return utilCompare(x, y);\n}\nexport function duration(x) {\n    return Math.abs(x);\n}\n","import { create as timeSpanCreate } from \"./TimeSpan\";\nimport { compare as utilCompare } from \"./Util\";\nimport * as Long from \"./Long\";\nexport function minValue() {\n    return parse(-8640000000000000, 1);\n}\nexport function maxValue() {\n    return parse(8640000000000000, 1);\n}\nexport function parse(v, kind) {\n    if (kind == null) {\n        kind = typeof v == \"string\" && v.slice(-1) == \"Z\" ? 1 /* UTC */ : 2 /* Local */;\n    }\n    var date = (v == null) ? new Date() : new Date(v);\n    if (kind === 2 /* Local */) {\n        date.kind = kind;\n    }\n    if (isNaN(date.getTime())) {\n        throw new Error(\"The string is not a valid Date.\");\n    }\n    return date;\n}\nexport function tryParse(v) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h, m, s, ms, kind) {\n    if (h === void 0) { h = 0; }\n    if (m === void 0) { m = 0; }\n    if (s === void 0) { s = 0; }\n    if (ms === void 0) { ms = 0; }\n    if (kind === void 0) { kind = 2 /* Local */; }\n    var date;\n    if (kind === 2 /* Local */) {\n        date = new Date(year, month - 1, day, h, m, s, ms);\n        date.kind = kind;\n    }\n    else {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n    }\n    if (isNaN(date.getTime())) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    return date;\n}\nexport function now() {\n    return parse();\n}\nexport function utcNow() {\n    return parse(null, 1);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\nexport function daysInMonth(year, month) {\n    return month == 2\n        ? isLeapYear(year) ? 29 : 28\n        : month >= 8 ? month % 2 == 0 ? 31 : 30 : month % 2 == 0 ? 30 : 31;\n}\nexport function toUniversalTime(d) {\n    return d.kind === 2 /* Local */ ? new Date(d.getTime()) : d;\n}\nexport function toLocalTime(d) {\n    if (d.kind === 2 /* Local */) {\n        return d;\n    }\n    else {\n        var d2 = new Date(d.getTime());\n        d2.kind = 2 /* Local */;\n        return d2;\n    }\n}\nexport function timeOfDay(d) {\n    return timeSpanCreate(0, hour(d), minute(d), second(d), millisecond(d));\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind || 1 /* UTC */);\n}\nexport function kind(d) {\n    return d.kind || 1 /* UTC */;\n}\nexport function day(d) {\n    return d.kind === 2 /* Local */ ? d.getDate() : d.getUTCDate();\n}\nexport function hour(d) {\n    return d.kind === 2 /* Local */ ? d.getHours() : d.getUTCHours();\n}\nexport function millisecond(d) {\n    return d.kind === 2 /* Local */ ? d.getMilliseconds() : d.getUTCMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 2 /* Local */ ? d.getMinutes() : d.getUTCMinutes();\n}\nexport function month(d) {\n    return (d.kind === 2 /* Local */ ? d.getMonth() : d.getUTCMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 2 /* Local */ ? d.getSeconds() : d.getUTCSeconds();\n}\nexport function year(d) {\n    return d.kind === 2 /* Local */ ? d.getFullYear() : d.getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 2 /* Local */ ? d.getDay() : d.getUTCDay();\n}\nexport function ticks(d) {\n    return Long.fromNumber(d.getTime())\n        .add(62135596800000) // UnixEpochMilliseconds\n        .sub(d.kind == 2 /* Local */ ? d.getTimezoneOffset() * 60 * 1000 : 0)\n        .mul(10000);\n}\nexport function toBinary(d) {\n    return ticks(d);\n}\nexport function dayOfYear(d) {\n    var _year = year(d);\n    var _month = month(d);\n    var _day = day(d);\n    for (var i = 1; i < _month; i++)\n        _day += daysInMonth(_year, i);\n    return _day;\n}\nexport function add(d, ts) {\n    return parse(d.getTime() + ts, d.kind || 1 /* UTC */);\n}\nexport function addDays(d, v) {\n    return parse(d.getTime() + v * 86400000, d.kind || 1 /* UTC */);\n}\nexport function addHours(d, v) {\n    return parse(d.getTime() + v * 3600000, d.kind || 1 /* UTC */);\n}\nexport function addMinutes(d, v) {\n    return parse(d.getTime() + v * 60000, d.kind || 1 /* UTC */);\n}\nexport function addSeconds(d, v) {\n    return parse(d.getTime() + v * 1000, d.kind || 1 /* UTC */);\n}\nexport function addMilliseconds(d, v) {\n    return parse(d.getTime() + v, d.kind || 1 /* UTC */);\n}\nexport function addTicks(d, t) {\n    return parse(Long.fromNumber(d.getTime()).add(t.div(10000)).toNumber(), d.kind || 1 /* UTC */);\n}\nexport function addYears(d, v) {\n    var newMonth = month(d);\n    var newYear = year(d) + v;\n    var _daysInMonth = daysInMonth(newYear, newMonth);\n    var newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind || 1 /* UTC */);\n}\nexport function addMonths(d, v) {\n    var newMonth = month(d) + v;\n    var newMonth_ = 0;\n    var yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ == 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    var newYear = year(d) + yearOffset;\n    var _daysInMonth = daysInMonth(newYear, newMonth);\n    var newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind || 1 /* UTC */);\n}\nexport function subtract(d, that) {\n    return typeof that == \"number\"\n        ? parse(d.getTime() - that, d.kind || 1 /* UTC */)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() == d2.getTime();\n}\nexport function compare(x, y) {\n    return utilCompare(x, y);\n}\nexport function compareTo(x, y) {\n    return utilCompare(x, y);\n}\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\n","import { toString } from \"./Util\";\nimport { getRestParams } from \"./Util\";\nimport { escape } from \"./RegExp\";\nimport { second } from \"./Date\";\nimport { minute } from \"./Date\";\nimport { hour } from \"./Date\";\nimport { day } from \"./Date\";\nimport { month } from \"./Date\";\nimport { year } from \"./Date\";\nvar fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nvar formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:(.+?))?\\}/g;\nvar StringComparison = {\n    CurrentCulture: 0,\n    CurrentCultureIgnoreCase: 1,\n    InvariantCulture: 2,\n    InvariantCultureIgnoreCase: 3,\n    Ordinal: 4,\n    OrdinalIgnoreCase: 5,\n};\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === StringComparison.CurrentCultureIgnoreCase ||\n            i === StringComparison.InvariantCultureIgnoreCase ||\n            i === StringComparison.OrdinalIgnoreCase;\n    }\n    function isOrdinal(i) {\n        return i === StringComparison.Ordinal ||\n            i === StringComparison.OrdinalIgnoreCase;\n    }\n    if (x == null)\n        return y == null ? 0 : -1;\n    if (y == null)\n        return 1; // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, false);\n}\nexport function indexOfAny(str, anyOf) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (str == null || str === \"\")\n        return -1;\n    var startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0)\n        throw new Error(\"String.indexOfAny: Start index cannot be negative\");\n    var length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0)\n        throw new Error(\"String.indexOfAny: Length cannot be negative\");\n    if (length > str.length - startIndex)\n        throw new Error(\"String.indexOfAny: Invalid startIndex and length\");\n    str = str.substr(startIndex, length);\n    for (var _a = 0, anyOf_1 = anyOf; _a < anyOf_1.length; _a++) {\n        var c = anyOf_1[_a];\n        var index = str.indexOf(c);\n        if (index > -1)\n            return index + startIndex;\n    }\n    return -1;\n}\nfunction toHex(value) {\n    return value < 0\n        ? \"ff\" + (16777215 - (Math.abs(value) - 1)).toString(16)\n        : value.toString(16);\n}\nexport function fsFormat(str) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    var _cont;\n    function isObject(x) {\n        return x !== null && typeof x === \"object\" && !(x instanceof Number) && !(x instanceof String) && !(x instanceof Boolean);\n    }\n    function formatOnce(str, rep) {\n        return str.replace(fsFormatRegExp, function (_, prefix, flags, pad, precision, format) {\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    rep = rep.toFixed(precision || 6);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = rep.toPrecision(precision);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = rep.toExponential(precision);\n                    break;\n                case \"O\":\n                    rep = toString(rep);\n                    break;\n                case \"A\":\n                    try {\n                        rep = JSON.stringify(rep, function (k, v) {\n                            return v && v[Symbol.iterator] && !Array.isArray(v) && isObject(v) ? Array.from(v)\n                                : v && typeof v.ToString === \"function\" ? toString(v) : v;\n                        });\n                    }\n                    catch (err) {\n                        // Fallback for objects with circular references\n                        rep = \"{\" + Object.getOwnPropertyNames(rep).map(function (k) { return k + \": \" + String(rep[k]); }).join(\", \") + \"}\";\n                    }\n                    break;\n                case \"x\":\n                    rep = toHex(Number(rep));\n                    break;\n                case \"X\":\n                    rep = toHex(Number(rep)).toUpperCase();\n                    break;\n            }\n            var plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep) >= 0;\n            if (!isNaN(pad = parseInt(pad))) {\n                var ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n                rep = padLeft(rep, Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n            }\n            var once = prefix + (plusPrefix ? \"+\" + rep : rep);\n            return once.replace(/%/g, \"%%\");\n        });\n    }\n    function makeFn(str) {\n        return function (rep) {\n            var str2 = formatOnce(str, rep);\n            return fsFormatRegExp.test(str2)\n                ? makeFn(str2) : _cont(str2.replace(/%%/g, \"%\"));\n        };\n    }\n    if (args.length === 0) {\n        return function (cont) {\n            _cont = cont;\n            return fsFormatRegExp.test(str) ? makeFn(str) : _cont(str);\n        };\n    }\n    else {\n        for (var i = 0; i < args.length; i++) {\n            str = formatOnce(str, args[i]);\n        }\n        return str.replace(/%%/g, \"%\");\n    }\n}\nexport function format(str) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return str.replace(formatRegExp, function (match, idx, pad, format) {\n        var rep = args[idx], padSymbol = \" \";\n        if (typeof rep === \"number\") {\n            switch ((format || \"\").substring(0, 1)) {\n                case \"f\":\n                case \"F\":\n                    rep = format.length > 1 ? rep.toFixed(format.substring(1)) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = format.length > 1 ? rep.toPrecision(format.substring(1)) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = format.length > 1 ? rep.toExponential(format.substring(1)) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (format.length > 1 ? (rep * 100).toFixed(format.substring(1)) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"x\":\n                    rep = toHex(Number(rep));\n                    break;\n                case \"X\":\n                    rep = toHex(Number(rep)).toUpperCase();\n                    break;\n                default:\n                    var m = /^(0+)(\\.0+)?$/.exec(format);\n                    if (m != null) {\n                        var decs = 0;\n                        if (m[2] != null)\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (format) {\n                        rep = format;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            if (format.length === 1) {\n                switch (format) {\n                    case \"D\":\n                        rep = rep.toDateString();\n                        break;\n                    case \"T\":\n                        rep = rep.toLocaleTimeString();\n                        break;\n                    case \"d\":\n                        rep = rep.toLocaleDateString();\n                        break;\n                    case \"t\":\n                        rep = rep.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n                        break;\n                    case \"o\":\n                    case \"O\":\n                        if (rep.kind === 2 /* Local */) {\n                            var offset = rep.getTimezoneOffset() * -1;\n                            rep = format(\"{0:yyyy-MM-dd}T{0:HH:mm}:{1:00.000}{2}{3:00}:{4:00}\", rep, second(rep), offset >= 0 ? \"+\" : \"-\", ~~(offset / 60), offset % 60);\n                        }\n                        else {\n                            rep = rep.toISOString();\n                        }\n                }\n            }\n            else {\n                rep = format.replace(/\\w+/g, function (match2) {\n                    var rep2 = match2;\n                    switch (match2.substring(0, 1)) {\n                        case \"y\":\n                            rep2 = match2.length < 4 ? year(rep) % 100 : year(rep);\n                            break;\n                        case \"h\":\n                            rep2 = rep.getHours() > 12 ? hour(rep) % 12 : hour(rep);\n                            break;\n                        case \"M\":\n                            rep2 = month(rep);\n                            break;\n                        case \"d\":\n                            rep2 = day(rep);\n                            break;\n                        case \"H\":\n                            rep2 = hour(rep);\n                            break;\n                        case \"m\":\n                            rep2 = minute(rep);\n                            break;\n                        case \"s\":\n                            rep2 = second(rep);\n                            break;\n                    }\n                    if (rep2 !== match2 && rep2 < 10 && match2.length > 1) {\n                        rep2 = \"0\" + rep2;\n                    }\n                    return rep2;\n                });\n            }\n        }\n        if (!isNaN(pad = parseInt((pad || \"\").substring(1)))) {\n            rep = padLeft(rep, Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    var idx = str.lastIndexOf(search);\n    return idx >= 0 && idx == str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0)\n        throw new Error(\"String length must be non-negative\");\n    var xs = new Array(n);\n    for (var i = 0; i < n; i++)\n        xs[i] = f(i);\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length == 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function join(delimiter, xs) {\n    xs = typeof xs == \"string\" ? getRestParams(arguments, 1) : xs;\n    return (Array.isArray(xs) ? xs : Array.from(xs)).join(delimiter);\n}\nexport function newGuid() {\n    var uuid = \"\";\n    for (var i = 0; i < 32; i++) {\n        var random = Math.random() * 16 | 0;\n        if (i === 8 || i === 12 || i === 16 || i === 20)\n            uuid += \"-\";\n        uuid += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);\n    }\n    return uuid;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    str = String(str);\n    len = len - str.length;\n    for (var i = -1; ++i < len;)\n        str = isRight ? str + ch : ch + str;\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, function () { return x; });\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count == \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty == \"number\" ? removeEmpty : null;\n    if (count < 0)\n        throw new Error(\"Count cannot be less than zero\");\n    if (count === 0)\n        return [];\n    splitters = Array.isArray(splitters) ? splitters : getRestParams(arguments, 1);\n    splitters = splitters.map(function (x) { return escape(x); });\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    var m;\n    var i = 0;\n    var splits = [];\n    var reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while ((count == null || count > 1) && (m = reg.exec(str)) !== null) {\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0)\n        splits.push(str.substring(i));\n    return splits;\n}\nexport function trim(str, side) {\n    var chars = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        chars[_i - 2] = arguments[_i];\n    }\n    if (side == \"both\" && chars.length == 0)\n        return str.trim();\n    if (side == \"start\" || side == \"both\") {\n        var reg = chars.length == 0 ? /^\\s+/ : new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\");\n        str = str.replace(reg, \"\");\n    }\n    if (side == \"end\" || side == \"both\") {\n        var reg = chars.length == 0 ? /\\s+$/ : new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\");\n        str = str.replace(reg, \"\");\n    }\n    return str;\n}\n","﻿namespace Common\n\nmodule Error =\n    \n    /// Error monad. Ok: valid result. Err: error string plus error value (line number).\n    type Error<'a> =\n        | Ok of 'a\n        | Err of int*string\n\n    /// Wrap function in error monad. Function must return error.\n    let wrapErr f x =\n        match x with\n        | Ok(arg) -> f arg\n        | Err(i,s) -> Err(i,s)\n\n    /// Return first 5 elements of list.\n    let errorList lst =\n        let rec addToStr lst n =\n            match n < 5 with\n            | true -> match lst with\n                      | h::t -> (sprintf \"%A\" h) + \"; \" + (addToStr t (n+1))\n                      | [] -> \"\"\n            | false -> \"\"\n        addToStr lst 0","﻿// The interpreter, this reads instructions and calls the appropriate function.\n\nnamespace Interpret\nmodule Interpreter =\n    \n    open Common.State\n    open Common.Error\n    open Common.Types\n\n    /// Calls functions on map of (memloc * instructions).\n    let rec interpret state instr =\n        match Map.tryFind (readPC state) instr with\n        | Some(Instr(l,f)) -> interpret (incPC (f state)) instr\n        | Some(Terminate(l)) -> Ok(l,state)\n        | Some(LabelRef(_)) -> Err(0,\"Unresolved label (branch/adr) - this should have been resolved in the parser.\")\n        | Some(EndRef(_)) -> Err(0,\"Unresolved termination - this should have been resolved in the parser.\")\n        | None -> Err(0,sprintf \"Instruction does not exist at address %A.\" (readPC state))\n\n    /// Runs ONLY the instruction pointed to by the PC in state.\n    let interpretLine state instr =\n        match Map.tryFind (readPC state) instr with\n        | Some(Instr(l,f)) -> Ok(l, incPC (f state))\n        | Some(Terminate(l)) -> Ok(l,state)\n        | Some(LabelRef(_)) -> Err(0,\"Unresolved label (branch/adr) - this should have been resolved in the parser.\")\n        | Some(EndRef(_)) -> Err(0,\"Unresolved termination - this should have been resolved in the parser.\")\n        | None -> Err(0,sprintf \"Instruction does not exist at address %A.\" (readPC state))","﻿// This file defines Enums that appear in the tokeniser and are used in interpretation.\n\nnamespace Common\n\nmodule Types =\n\n    open Error\n    open State\n    \n    /// Shift tokens.\n    type shiftOp =\n        | T_ASR\n        | T_LSL\n        | T_LSR\n        | T_ROR\n        | T_RRX\n\n    /// Load/Store Multiple tokens.\n    type stackOrder =\n        | S_IA\n        | S_IB\n        | S_DA\n        | S_DB\n\n    /// Operand type tokens.\n    type opType =\n        | T_I\n        | T_R\n\n    /// Wrapper for instructions, including unresolved references.\n    type Instruction = \n        | LabelRef of (Map<string,int> -> Error<Instruction>)\n        | EndRef of (int -> Instruction)\n        // Instruction contains the line number in addition to the function that transforms the state.\n        | Instr of int*(StateHandle -> StateHandle)\n        | Terminate of int","﻿// This module contains functions to run the ARMv4 instruction set.\n // Mark down document: https://github.com/coopersimon/HLP/blob/dev_16_03/Documentation/Interfaces/ARMv4.md\n // Not all instructions supported by the following functions are support by VISUAL. \n // VISUAL supports : https://web.archive.org/web/20160831113526/http://salmanarif.bitbucket.org/visual/supported_instructions.html\n\nnamespace Interpret\nmodule ARMv4 =\n    open Common.State\n    open Common.Types\n\n    let shiftI inst r n state =\n        match inst with \n        |T_LSL -> if (n>=0)&&(n<=31) then (readReg r state)<<<n\n                                     else failwith \"Invalid n.\"\n        |T_LSR -> if (n>=1)&&(n<=32) then (if n=32 then 0 else int((uint32 (readReg r state))/(uint32 (2.0**(float n)))))\n                                     else failwith \"Invalid n.\"\n        |T_ASR -> if (n>=1)&&(n<=32) then (readReg r state)/(int (2.0**(float n)))\n                                     else failwith \"Invalid n.\"\n        |T_ROR -> if (n>=1)&&(n<=31) then (readReg r state)>>>n\n                                     else failwith \"Invalid n.\"\n        |T_RRX -> match (readCFlag state) with\n                    |true -> (readReg r state)/2 + 1<<<31\n                    |false -> (readReg r state)/2\n\n    let shiftR inst r rn state =\n        shiftI inst r (readReg rn state) state\n\n    let shiftSetCI s inst r n state =\n        match inst with\n        |T_LSL -> if s then writeCFlag (((readReg r state)>>>(32-n))%2<>0) state else state \n        |T_LSR -> if s then writeCFlag (((readReg r state)>>>(n-1))%2<>0) state else state \n        |T_ASR -> if s then writeCFlag (((readReg r state)>>>(n-1))%2<>0) state else state \n        |T_ROR -> if s then writeCFlag (((readReg r state)>>>(n-1))%2<>0) state else state \n        |T_RRX -> if s then writeCFlag ((readReg r state)%2<>0) state else state\n\n    let shiftSetCR s inst r rn state = \n        shiftSetCI s inst r (readReg rn state) state\n\n//functions to set flags\n    //set N and Z flags for all cases\n    let setNZ result state =\n        state |> writeNFlag (result<0) |> writeZFlag (result=0)\n\n    //set C for arithmetic ADD, ADC, SUB, SBC, RSB and RSC cases (Note: in1 and in2 are int64)\n    let setC in1 in2 state = \n        writeCFlag (((in1+in2)>>>32)%2L<>0L) state\n\n    //this function converts an int32 to an int64 without sign extension.\n    let conv64 i = (int64 i)&&&(4294967295L)\n\n    //set V for arithmetic ADD, ADC, SUB, SBC, RSB and RSC cases (Note: in1 and in2 are int)\n    let setV in1 in2 state =   \n        let cin = ((conv64(in1*2)+conv64(in2*2))>>>32)%2L\n        let cout = (((conv64 in1)+(conv64 in2))>>>32)%2L\n        writeVFlag (cin<>cout) state\n     \n\n\n//MOV and MVN (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHCDBCA.html\n\n    //write op2 to r\n    let movI c s rd i state = //if s: sets N and Z flags only\n        match (c state, s) with\n        | (true, true) -> state |> setNZ i |> writeReg rd i \n        | (true, false) -> writeReg rd i state\n        | _ -> state\n\n    let movR c s rd rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> movI c s rd op2\n             |T_R -> shiftSetCR s rsinst rm nORrn state |> movI c s rd op2\n        else state\n        \n    //write bitwise not of op2 to r\n    let mvnI c s rd i state = //if s: sets N and Z flags only\n        movI c s rd ~~~i state \n\n    let mvnR c s rd rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state \n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> mvnI c s rd op2 \n             |T_R -> shiftSetCR s rsinst rm nORrn state |> mvnI c s rd op2     \n        else state\n\n//ADD, ADC, SUB, SBC, RSB and RSC (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHCJFJG.html\n\n    //write rn+op2 to rd\n    let addI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ ((readReg rn state)+i) \n                          |> setC (conv64 (readReg rn state)) (conv64 i)\n                          |> setV (readReg rn state) (i) \n                          |> writeReg rd ((readReg rn state)+i)\n        | (true, false) -> writeReg rd ((readReg rn state)+i) state\n        | _ -> state\n    \n    let addR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        addI c s rd rn op2 state\n\n    //write rn+op2+carry to rd\n    let adcI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s, readCFlag state) with \n        | (true, true, false) -> state\n                                 |> setNZ ((readReg rn state)+i) \n                                 |> setC (conv64 (readReg rn state)) (conv64 i)\n                                 |> setV (readReg rn state) (i) \n                                 |> writeReg rd ((readReg rn state)+i) \n        | (true, true, true) ->  state\n                                 |> setNZ ((readReg rn state)+i+1) \n                                 |> setC (conv64 (readReg rn state)) ((conv64 i)+1L)\n                                 |> setV (readReg rn state) (i+1) \n                                 |> writeReg rd ((readReg rn state)+i+1) \n        | (true, false, false) -> writeReg rd ((readReg rn state)+i) state\n        | (true, false, true) -> writeReg rd ((readReg rn state)+i+1) state\n        | _ -> state\n    \n    let adcR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        adcI c s rd rn op2 state\n    \n    //write rn-op2 to rd\n    let subI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ ((readReg rn state)-i) \n                          |> setC (conv64 (readReg rn state)) ((conv64 ~~~i)+1L)\n                          |> setV (readReg rn state) (-i)\n                          |> writeReg rd ((readReg rn state)-i)\n        | (true, false) -> writeReg rd ((readReg rn state)-i) state\n        | _ -> state\n    \n    let subR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        subI c s rd rn op2 state\n\n    //write rn-op2-!carry to rd\n    let sbcI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s, readCFlag state) with \n        | (true, true, true) -> state\n                                |> setNZ ((readReg rn state)-i)\n                                |> setC (conv64 (readReg rn state)) ((conv64 ~~~i)+1L) \n                                |> setV (readReg rn state) (-i) \n                                |> writeReg rd ((readReg rn state)-i) \n        | (true, true, false) -> state\n                                |> setNZ ((readReg rn state)-i-1) \n                                |> setC (conv64 (readReg rn state)) ((conv64 ~~~i)) \n                                |> setV (readReg rn state) (-i-1) \n                                |> writeReg rd ((readReg rn state)-i-1) \n        | (true, false, true) -> writeReg rd ((readReg rn state)-i) state\n        | (true, false, false) -> writeReg rd ((readReg rn state)-i-1) state\n        | _ -> state\n    \n    let sbcR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        sbcI c s rd rn op2 state\n\n    //write op2-rn to rd\n    let rsbI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ (i-(readReg rn state))\n                          |> setC (conv64 ~~~(readReg rn state)+1L) (conv64 i) \n                          |> setV (-(readReg rn state)) (i) \n                          |> writeReg rd (i-(readReg rn state)) \n        | (true, false) -> writeReg rd (i-(readReg rn state)) state\n        | _ -> state\n    \n    let rsbR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        rsbI c s rd rn op2 state\n\n    //write op2-rn-!carry to rd\n    let rscI c s rd rn i state = //if s: sets N, Z, C, V flags\n        match (c state, s, readCFlag state) with \n        | (true, true, true) -> state\n                                |> setNZ (i-(readReg rn state)) \n                                |> setC (conv64 ~~~(readReg rn state)+1L) (conv64 i) \n                                |> setV (-(readReg rn state)) (i) \n                                |> writeReg rd (i-(readReg rn state)) \n        | (true, true, false) -> state\n                                |> setNZ (i-(readReg rn state)-1) \n                                |> setC (conv64 ~~~(readReg rn state)) (conv64 i) \n                                |> setV (-(readReg rn state)-1) (i) \n                                |> writeReg rd (i-(readReg rn state)-1) \n        | (true, false, true) -> writeReg rd (i-(readReg rn state)) state\n        | (true, false, false) -> writeReg rd (i-(readReg rn state)-1) state\n        | _ -> state\n    \n    let rscR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        rscI c s rd rn op2 state\n\n//CMP and CMN (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHIDDID.html\n\n    //same as SUBS but discards results\n    let cmpI c rn i state = //sets N, Z, C, V flags\n        match c state with \n        | true -> setNZ ((readReg rn state)-i) state\n                  |> setC (conv64 (readReg rn state)) ((conv64 ~~~i)+1L) \n                  |> setV (readReg rn state) (-i) \n        | false -> state\n\n    let cmpR c rn rm rsinst nORrn rstype state = //sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        cmpI c rn op2 state\n        \n    //same as ADDS but discards results\n    let cmnI c rn i state = //sets N, Z, C, V flags\n        match c state with \n        | true -> setNZ ((readReg rn state)+i) state\n                  |> setC (conv64 (readReg rn state)) (conv64 i)\n                  |> setV (readReg rn state) (i)\n        | false -> state\n\n    let cmnR c rn rm rsinst nORrn rstype state = //sets N, Z, C, V flags\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        cmnI c rn op2 state        \n\n//MUL and MLA (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHIHGGJ.html\n    \n    //write rm*rs to rd\n    let mulR c s rd rm rs state = //if s: sets N and Z flags only\n        let res = (readReg rm state)*(readReg rs state)\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ res \n                          |> writeReg rd res \n        | (true, false) -> writeReg rd res state\n        | _ -> state    \n    \n    //write rm*rs+rn to rd\n    let mlaR c s rd rm rs rn state = //if s: sets N and Z flags only\n        let res = (readReg rm state)*(readReg rs state)+(readReg rn state)\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ res \n                          |> writeReg rd res \n        | (true, false) -> writeReg rd res state\n        | _ -> state        \n\n//AND, ORR, EOR, and BIC (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHDAFAI.html\n\n    //write bitwise AND of rn and op2 to rd\n    let andI c s rd rn i state = //if s: sets N and Z flags only\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ ((readReg rn state)&&&i) \n                          |> writeReg rd ((readReg rn state)&&&i) \n        | (true, false) -> writeReg rd ((readReg rn state)&&&i) state\n        | _ -> state\n    \n    let andR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> andI c s rd rn op2\n             |T_R -> shiftSetCR s rsinst rm nORrn state |> andI c s rd rn op2\n        else state\n\n    //write bitwise OR of rn and op2 to rd\n    let orrI c s rd rn i state = //if s: sets N and Z flags only\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ ((readReg rn state)|||i) \n                          |> writeReg rd ((readReg rn state)|||i) \n        | (true, false) -> writeReg rd ((readReg rn state)|||i) state\n        | _ -> state\n\n    let orrR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> orrI c s rd rn op2\n             |T_R -> shiftSetCR s rsinst rm nORrn state |> orrI c s rd rn op2\n        else state\n\n    //write bitwise XOR of rn and op2 to rd\n    let eorI c s rd rn i state = //if s: sets N and Z flags only\n        match (c state, s) with \n        | (true, true) -> state\n                          |> setNZ ((readReg rn state)^^^i)\n                          |> writeReg rd ((readReg rn state)^^^i) \n        | (true, false) -> writeReg rd ((readReg rn state)^^^i) state\n        | _ -> state\n    \n    let eorR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> eorI c s rd rn op2\n             |T_R -> shiftSetCR s rsinst rm nORrn state |> eorI c s rd rn op2\n        else state\n\n    //write bitwise AND of rn and NOT(op2) to rd\n    let bicI c s rd rn i state = //if s: sets N and Z flags only\n        andI c s rd rn (~~~i) state\n    \n    let bicR c s rd rn rm rsinst nORrn rstype state = //if s: sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI s rsinst rm nORrn state |> bicI c s rd rn op2\n             |T_R -> shiftSetCR s rsinst rm nORrn state |> bicI c s rd rn op2\n        else state\n\n//TST and TEQ (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHCDEHH.html\n\n    //same as ANDS but discards results\n    let tstI c rn i state = //sets N and Z flags only\n        match c state with \n        | true -> setNZ ((readReg rn state)&&&i) state\n        | false -> state\n\n    let tstR c rn rm rsinst nORrn rstype state = //sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI (true) rsinst rm nORrn state |> tstI c rn op2\n             |T_R -> shiftSetCR (true) rsinst rm nORrn state |> tstI c rn op2\n        else state\n        \n    //same as EORS but discards results\n    let teqI c rn i state = //sets N and Z flags only\n        match c state with \n        | true -> setNZ ((readReg rn state)^^^i) state\n        | false -> state\n\n    let teqR c rn rm rsinst nORrn rstype state = //sets N, Z (and C) flags only\n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then match rstype with\n             |T_I -> shiftSetCI (true) rsinst rm nORrn state |> teqI c rn op2\n             |T_R -> shiftSetCR (true) rsinst rm nORrn state |> teqI c rn op2\n        else state\n\n//CLZ (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHJGJED.html\n\n    //counts the number of leading zeroes in the value in Rm and returns the result in Rd\n    let clzR c rd rm state = \n        let rec loop m c = match m with\n                           | 0  -> 32\n                           | m when m < 0 -> c\n                           | _  -> loop (m <<< 1) (c + 1)\n        if c state\n        then writeReg rd (loop (readReg rm state) 0) state\n        else state\n        \n//LSL, LSR, ASR, ROR, RRX (DONE)\n\n    //logical shift left rm by rn, write into rd\n    let lslR c s rd rm rn state = //if s: set N and Z only\n        let op2 = shiftR (T_LSL) rm rn state\n        match (c state, s) with\n        | (true, true) -> state\n                          |> setNZ op2\n                          |> shiftSetCR s (T_LSL) rm rn \n                          |> writeReg rd op2 \n        | (true, false) -> writeReg rd op2 state\n        | _ -> state        \n\n    //logical shift right rm by rn, write into rd\n    let lsrR c s rd rm rn state = //if s: set N and Z only\n        let op2 = shiftR (T_LSR) rm rn state\n        match (c state, s) with\n        | (true, true) -> state\n                          |> setNZ op2\n                          |> shiftSetCR s (T_LSR) rm rn \n                          |> writeReg rd op2 \n        | (true, false) -> writeReg rd op2 state\n        | _ -> state       \n        \n     //arithmetic shift right rm by rn, write into rd\n    let asrR c s rd rm rn state = //if s: set N and Z only\n        let op2 = shiftR (T_ASR) rm rn state\n        match (c state, s) with\n        | (true, true) -> state\n                         |> setNZ op2\n                         |> shiftSetCR s (T_ASR) rm rn \n                         |> writeReg rd op2 \n        | (true, false) -> writeReg rd op2 state\n        | _ -> state        \n     \n     //rotate right rm by rn, write into rd\n    let rorR c s rd rm rn state = //if s: set N, Z and (C) only\n        let op2 = shiftR (T_ROR) rm rn state\n        match (c state, s) with\n        | (true, true) -> state\n                          |> setNZ op2 \n                          |> shiftSetCR s (T_ROR) rm rn \n                          |> writeReg rd op2 \n        | (true, false) -> writeReg rd op2 state\n        | _ -> state             \n        \n     //rotate right (and extend) rm by 1, write into rd\n    let rrxR c s rd rm state = //if s: set N, Z (and C) only\n        let op2 = shiftR (T_RRX) rm (1) state\n        match (c state, s) with\n        | (true, true) -> state\n                          |> setNZ op2 \n                          |> shiftSetCR s (T_RRX) rm (1) \n                          |> writeReg rd op2 \n        | (true, false) -> writeReg rd op2 state\n        | _ -> state              \n\n//B, BL, BX, BLX (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHFDDAF.html\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHDGEAI.html\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHFJFDG.html\n\n    //branch to address corresponding to label\n    let b c label state =\n        if c state\n        then writePC label state\n        else state\n\n    //store address of next instruction in r14, branch to address corresponding to label\n    let bl c label state =\n        if c state\n        then writeReg 14 (readPC state) state\n             |> writePC label \n        else state\n\n    //branch to address stored in rm\n    let bx c rm state =\n        if c state\n        then writePC ((readReg rm state)-4) state \n        else state\n\n    //store address of next instruction in r14, branch to address indicated by op2\n    let blxR c rm state = \n        if c state\n        then writeReg 14 (readPC state) state\n             |> writePC ((readReg rm state)-4) \n        else state\n\n    let blxL label state = //only if no condition follows\n        writeReg 14 (readPC state) state\n        |> writePC label \n\n//ADR, LDR and STR (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0041c/Babcjaii.html\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/Bcfihdhj.html\n\n    //writes the address corresponding to label into rd\n    let adr c rd label state =\n        if c state\n        then writeReg rd label state  \n        else state\n        \n    //Loads word from label to rd.\n    let ldrWL c rd label state = \n        if c state\n        then writeReg rd (readMem label state) state  \n        else state\n    \n    //Loads least significant byte from label to rd.\n    let ldrBL c rd label state = \n        if c state\n        then writeReg rd ((readMem label state)&&&255) state  \n        else state\n        \n    //More LDRs (details see ARMv4.md)\n    let ldrWbI c inc rd rn i state = \n        if c state\n        then match inc with \n             | true -> state\n                       |> writeReg rd (readMem ((readReg rn state)+i) state)  \n                       |> writeReg rn ((readReg rn state)+i)\n             | false -> state\n                        |> writeReg rd (readMem ((readReg rn state)+i) state) \n        else state\n    \n    let ldrWbR c inc rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state \n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then ldrWbI c inc rd rn op2 state\n        else state\n    \n    let ldrWaI c rd rn i state = \n        if c state\n        then state\n             |> writeReg rd (readMem (readReg rn state) state)  \n             |> writeReg rn ((readReg rn state)+i) \n        else state\n    \n    let ldrWaR c rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then ldrWaI c rd rn op2 state\n        else state\n    \n    let ldrBbI c inc rd rn i state = \n        if c state\n        then match inc with \n             | true -> state\n                       |> writeReg rd (readMem (((readReg rn state)+i)&&&255) state)  \n                       |> writeReg rn ((readReg rn state)+i)\n             | false -> state\n                        |> writeReg rd (readMem (((readReg rn state)+i)&&&255) state)  \n        else state\n    \n    let ldrBbR c inc rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then ldrBbI c inc rd rn op2 state\n        else state\n    \n    let ldrBaI c rd rn i state = \n        if c state\n        then state\n             |> writeReg rd (readMem ((readReg rn state)&&&255) state)  \n             |> writeReg rn ((readReg rn state)+i)\n        else state\n    \n    let ldrBaR c rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then ldrBaI c rd rn op2 state\n        else state\n    \n    //STRs (details see ARMv4.md)\n    let strWbI c inc rd rn i state = \n        if c state\n        then match inc with \n             | true -> state\n                       |> writeMem ((readReg rn state)+i) (readReg rd state) \n                       |> writeReg rn ((readReg rn state)+i) \n             | false -> state\n                        |> writeMem ((readReg rn state)+i) (readReg rd state) \n        else state\n    \n    let strWbR c inc rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then strWbI c inc rd rn op2 state\n        else state\n    \n    let strWaI c rd rn i state = \n        if c state\n        then state\n             |> writeMem (readReg rn state) (readReg rd state) \n             |> writeReg rn ((readReg rn state)+i) \n        else state\n    \n    let strWaR c rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then strWaI c rd rn op2 state\n        else state\n    \n    let strBbI c inc rd rn i state = \n        let memVal = (readMem ((readReg rn state)+i) state)  \n        let regVal = readReg rd state\n        let writeVal = ((~~~255)&&&memVal)|||(255&&&regVal) \n        if c state\n        then match inc with \n             | true -> state\n                       |> writeMem ((readReg rn state)+i) writeVal\n                       |> writeReg rn ((readReg rn state)+i)\n             | false -> state\n                        |> writeMem ((readReg rn state)+i) writeVal\n        else state\n    \n    let strBbR c inc rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then strBbI c inc rd rn op2 state\n        else state\n    \n    let strBaI c rd rn i state = \n        let memVal = (readMem (readReg rn state) state) \n        let regVal = readReg rd state\n        let writeVal = ((~~~255)&&&memVal)|||(255&&&regVal) \n        if c state\n        then state\n             |> writeMem (readReg rn state) writeVal\n             |> writeReg rn ((readReg rn state)+i)\n        else state\n    \n    let strBaR c rd rn rm rsinst nORrn rstype state = \n        let op2 =\n            match rstype with\n            |T_I -> shiftI rsinst rm nORrn state\n            |T_R -> shiftR rsinst rm nORrn state\n        if c state\n        then strBaI c rd rn op2 state\n        else state\n\n//LDM and STM\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHCADDA.html\n//see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473c/Cacbgchh.html for equivalent modes\n    \n    let rec ldmIA c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeReg hReg (readMem mem state) \n                                 |> loop (mem+4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem+(List.length reglist)*4) state) else state\n             |> loop startMem reglist\n        else state\n    \n    let ldmIB c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeReg hReg (readMem mem state) \n                                 |> loop (mem+4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem+((List.length reglist)+1)*4) state) else state\n             |> loop (startMem+4) reglist\n        else state\n    \n    let ldmDA c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeReg hReg (readMem mem state) \n                                 |> loop (mem-4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem-(List.length reglist)*4) state) else state\n             |> loop startMem reglist\n        else state\n    \n    let ldmDB c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeReg hReg (readMem mem state) \n                                 |> loop (mem-4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem-((List.length reglist)+1)*4) state) else state\n             |> loop (startMem-4) reglist\n        else state\n    \n    let stmIA c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeMem mem (readReg hReg state) \n                                 |> loop (mem+4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem+(List.length reglist)*4) state) else state\n             |> loop startMem reglist\n        else state\n        \n    let stmIB c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeMem mem (readReg hReg state) \n                                 |> loop (mem+4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem+((List.length reglist)+1)*4) state) else state\n             |> loop (startMem+4) reglist\n        else state\n    \n    let stmDA c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeMem mem (readReg hReg state) \n                                 |> loop (mem-4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem-(List.length reglist)*4) state) else state\n             |> loop startMem reglist\n        else state\n    \n    let stmDB c write rn (reglist:int list) state = \n        let rec loop mem (reglist:int list) state = \n            match reglist with\n            | hReg :: tailReg -> state\n                                 |> writeMem mem (readReg hReg state) \n                                 |> loop (mem-4) tailReg\n            | [] -> state\n        let startMem = readReg rn state\n        if c state\n        then if write then (writeReg rn (startMem-((List.length reglist)+1)*4) state) else state\n             |> loop (startMem-4) reglist\n        else state\n    \n//DCD, EQU and FILL (DONE)\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0041c/Babbfcga.html\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489h/Caccddic.html\n//http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489f/Babchded.html\n\n    let dcd label (valList:(int*char) list) state = \n        let rec loop mem (vlist:(int*char) list) state = \n            match vlist with\n            | (i,'i') :: tailList -> state\n                                    |> writeMem mem i\n                                    |> loop (mem+4) tailList\n\n            | (r,'r') :: tailList -> state\n                                    |> writeMem mem (readReg r state)\n                                    |> loop (mem+4) tailList\n            | (m,'m') :: tailList -> state\n                                    |> writeMem mem (readMem m state)\n                                    |> loop (mem+4) tailList\n            | [] -> state\n            | _ -> failwith \"Invalid data type.\"\n        loop label valList state\n    \n    let equ name (value:int*char) state = \n        match value with\n        | (i,'i') -> writeMem name i state\n        | (r,'r') -> writeMem name (readReg r state) state\n        | (m,'m') -> writeMem name (readMem m state) state\n        | _ -> failwith \"Invalid data type.\"\n\n    let fillW label data value state = \n        let rec loop mem n val2 state = \n            if n=0 then state else (state |> writeMem mem val2 |> loop (mem+4) (n-4) val2)\n        loop label data value state\n    \n//END (DONE)\n    //stop emulation\n    let endI c finalInstAddr state = \n        if c state\n        then writePC finalInstAddr state \n        else state\n","﻿// This module contains the parser:\n\nnamespace Parse\nmodule Parser =\n    \n    open Tokeniser\n    open Interpret.ARMv4\n    open Common.Error\n    open Common.Types\n\n    /// Replaces placeholder branch and end references with correct instructions.\n    let private resolveRefs labels endMem instrLst =\n        let rec resolveRec labels endMem outLst = function\n            | (m, LabelRef(f))::t -> match f labels with\n                                       | Ok(h) -> resolveRec labels endMem (outLst@[(m, h)]) t\n                                       | Err(l,s) -> Err(l,s)\n            | (m, EndRef(f))::t -> resolveRec labels endMem (outLst@[(m, f endMem)]) t\n            | h::t -> resolveRec labels endMem (outLst@[h]) t\n            | [] -> Ok(outLst)\n        resolveRec labels endMem [] instrLst\n\n\n    /// Make a list of registers for LDM/STM, from token list.\n    let private regList tokLst =\n        /// Gets register range {Rx-Ry}\n        let rec regRange r1 r2 outLst =\n            match r1 < r2 with\n            | true -> regRange (r1+1) r2 (outLst@[r1])\n            | false when r1=r2 -> Ok(outLst@[r1])\n            | false -> Err(0,\"Register range invalid.\")\n\n        /// Gets register list from {}, for LDM/STM\n        let rec regRec outLst = function\n            | T_REG r :: T_COMMA :: t -> regRec (outLst@[r]) t\n            | T_REG r1 :: T_DASH :: T_REG r2 :: T_COMMA :: t ->\n                match regRange r1 r2 [] with\n                | Ok(lst) -> regRec (outLst@lst) t\n                | Err(_,s) -> Err(0,s)\n            | T_REG r :: T_R_CBR :: t -> Ok(outLst@[r], t)\n            | T_REG r1 :: T_DASH :: T_REG r2 :: T_R_CBR :: t ->\n                match regRange r1 r2 [] with\n                | Ok(lst) -> Ok(outLst@lst, t)\n                | Err(_,s) -> Err(0,s)\n            | T_ERROR s :: t -> Err(0,sprintf \"Invalid input string: %s.\" s)\n            | tok :: t -> Err(0,sprintf \"Unexpected token: %A. Followed by: %s.\" tok (errorList t))\n            | [] -> Err(0,sprintf \"Incomplete register range.\")\n        regRec [] tokLst\n\n\n    /// Parses a list of tokens into a memory map of instructions.\n    let parser tokLst =\n        /// Function that resolves branch.\n        let branchRef l c s bInst (labels:Map<string,int>) =\n            match Map.tryFind s labels with\n            | Some(memLoc) -> Ok(Instr(l, bInst c (memLoc-4)))\n            | None -> Err(l,sprintf \"Label undefined: %s.\" s)\n\n        /// Function that resolves ldr =label.\n        let lsaRef l c rd s inst (labels:Map<string,int>) =\n            match Map.tryFind s labels with\n            | Some(memLoc) -> Ok(Instr(l, inst c rd memLoc))\n            | None -> Err(l,sprintf \"Label undefined: %s.\" s)\n\n        /// Function that resolves end.\n        let endRef l c endMem =\n            Instr(l, endI c (endMem-4))\n\n        /// Construct a list of instructions. m: memory location, l: line number.\n        let rec parseRec m l labels outLst = function\n            // ARITHMETIC\n\n            | T_MOV (c,s) :: T_REG rd :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, movI c s rd i))]) t\n            | T_MOV (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, movR c s rd rm z i T_I))]) t\n            | T_MOV (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, movR c s rd rm z rs T_R))]) t\n            | T_MOV (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, movR c s rd rm T_LSL 0 T_I))]) t\n\n            | T_MVN (c,s) :: T_REG rd :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mvnI c s rd i))]) t\n            | T_MVN (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mvnR c s rd rm z i T_I))]) t\n            | T_MVN (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mvnR c s rd rm z rs T_R))]) t\n            | T_MVN (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mvnR c s rd rm T_LSL 0 T_I))]) t\n\n            | T_ADD (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, addI c s rd rn i))]) t\n            | T_ADD (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, addR c s rd rn rm z i T_I))]) t\n            | T_ADD (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, addR c s rd rn rm z rs T_R))]) t\n            | T_ADD (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, addR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_ADC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, adcI c s rd rn i))]) t\n            | T_ADC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, adcR c s rd rn rm z i T_I))]) t\n            | T_ADC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, adcR c s rd rn rm z rs T_R))]) t\n            | T_ADC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, adcR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_SUB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, subI c s rd rn i))]) t\n            | T_SUB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, subR c s rd rn rm z i T_I))]) t\n            | T_SUB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, subR c s rd rn rm z rs T_R))]) t\n            | T_SUB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, subR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_SBC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, sbcI c s rd rn i))]) t\n            | T_SBC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, sbcR c s rd rn rm z i T_I))]) t\n            | T_SBC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, sbcR c s rd rn rm z rs T_R))]) t\n            | T_SBC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, sbcR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_RSB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rsbI c s rd rn i))]) t\n            | T_RSB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rsbR c s rd rn rm z i T_I))]) t\n            | T_RSB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rsbR c s rd rn rm z rs T_R))]) t\n            | T_RSB (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rsbR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_RSC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rscI c s rd rn i))]) t\n            | T_RSC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rscR c s rd rn rm z i T_I))]) t\n            | T_RSC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rscR c s rd rn rm z rs T_R))]) t\n            | T_RSC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rscR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_MUL (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mulR c s rd rm rs))]) t\n\n            | T_MLA (c,s) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rs :: T_COMMA :: T_REG rn :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, mlaR c s rd rm rs rn))]) t\n\n            // LOGIC\n            | T_AND (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, andI c s rd rn i))]) t\n            | T_AND (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, andR c s rd rn rm z i T_I))]) t\n            | T_AND (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, andR c s rd rn rm z rs T_R))]) t\n            | T_AND (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, andR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_ORR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, orrI c s rd rn i))]) t\n            | T_ORR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, orrR c s rd rn rm z i T_I))]) t\n            | T_ORR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, orrR c s rd rn rm z rs T_R))]) t\n            | T_ORR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, orrR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_EOR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, eorI c s rd rn i))]) t\n            | T_EOR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, eorR c s rd rn rm z i T_I))]) t\n            | T_EOR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, eorR c s rd rn rm z rs T_R))]) t\n            | T_EOR (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, eorR c s rd rn rm T_LSL 0 T_I))]) t\n\n            | T_BIC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, bicI c s rd rn i))]) t\n            | T_BIC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, bicR c s rd rn rm z i T_I))]) t\n            | T_BIC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, bicR c s rd rn rm z rs T_R))]) t\n            | T_BIC (c,s) :: T_REG rd :: T_COMMA :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, bicR c s rd rn rm T_LSL 0 T_I))]) t\n\n            // COMPARISON\n            | T_CMP c :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmpI c rn i))]) t\n            | T_CMP c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmpR c rn rm z i T_I))]) t\n            | T_CMP c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmpR c rn rm z rs T_R))]) t\n            | T_CMP c :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmpR c rn rm T_LSL 0 T_I))]) t\n\n            | T_CMN c :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmnI c rn i))]) t\n            | T_CMN c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmnR c rn rm z i T_I))]) t\n            | T_CMN c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmnR c rn rm z rs T_R))]) t\n            | T_CMN c :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, cmnR c rn rm T_LSL 0 T_I))]) t\n\n            | T_TST c :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstI c rn i))]) t\n            | T_TST c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm z i T_I))]) t\n            | T_TST c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm z rs T_R))]) t\n            | T_TST c :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm T_LSL 0 T_I))]) t\n\n            | T_TEQ c :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, teqI c rn i))]) t\n            | T_TEQ c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, teqR c rn rm z i T_I))]) t\n            | T_TEQ c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, teqR c rn rm z rs T_R))]) t\n            | T_TEQ c :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, teqR c rn rm T_LSL 0 T_I))]) t\n\n            // BITWISE\n            | T_CLZ c :: T_REG rn :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstI c rn i))]) t\n            | T_CLZ c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm z i T_I))]) t\n            | T_CLZ c :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm z rs T_R))]) t\n            | T_CLZ c :: T_REG rn :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, tstR c rn rm T_LSL 0 T_I))]) t\n\n            | T_SHIFT (T_LSL,(c,s)) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rn :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, lslR c s rd rm rn))]) t\n\n            | T_SHIFT (T_LSR,(c,s)) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rn :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, lsrR c s rd rm rn))]) t\n\n            | T_SHIFT (T_ASR,(c,s)) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rn :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, asrR c s rd rm rn))]) t\n\n            | T_SHIFT (T_ROR,(c,s)) :: T_REG rd :: T_COMMA :: T_REG rm :: T_COMMA :: T_REG rn :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rorR c s rd rm rn))]) t\n\n            | T_SHIFT (T_RRX,(c,s)) :: T_REG rd :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, rrxR c s rd rm))]) t\n\n            // BRANCHING\n            | T_B c :: T_LABEL s :: t ->\n                parseRec (m+4) l labels (outLst@[(m, LabelRef(branchRef l c s b))]) t\n            | T_BL c :: T_LABEL s :: t ->\n                parseRec (m+4) l labels (outLst@[(m, LabelRef(branchRef l c s bl))]) t\n            | T_BX c :: T_REG r :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, bx c r))]) t\n\n            // MEMORY\n            | T_ADR c :: T_REG rd :: T_COMMA :: T_LABEL s :: t ->\n                parseRec (m+4) l labels (outLst@[(m, LabelRef(lsaRef l c rd s adr))]) t\n\n            // LOAD SINGLE\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWaR c rd rn rm z i T_I))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWaR c rd rn rm z rs T_R))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWaI c rd rn i))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWaR c rd rn rm T_LSL 0 T_I))]) t\n\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBaR c rd rn rm z i T_I))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBaR c rd rn rm z rs T_R))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBaI c rd rn i))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBaR c rd rn rm T_LSL 0 T_I))]) t\n\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_EQUAL :: T_LABEL s :: t ->\n                parseRec (m+4) l labels (outLst@[(m, LabelRef(lsaRef l c rd s ldrWL))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbI c false rd rn 0))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbI c true rd rn i))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbI c false rd rn i))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c true rd rn rm T_LSL 0 T_I))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c false rd rn rm T_LSL 0 T_I))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c true rd rn rm z i T_I))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c false rd rn rm z i T_I))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c true rd rn rm z rs T_R))]) t\n            | T_LDR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrWbR c false rd rn rm z rs T_R))]) t\n\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_EQUAL :: T_LABEL s :: t ->\n                parseRec (m+4) l labels (outLst@[(m, LabelRef(lsaRef l c rd s ldrBL))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbI c false rd rn 0))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbI c true rd rn i))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbI c false rd rn i))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c true rd rn rm T_LSL 0 T_I))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c false rd rn rm T_LSL 0 T_I))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c true rd rn rm z i T_I))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c false rd rn rm z i T_I))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c true rd rn rm z rs T_R))]) t\n            | T_LDRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, ldrBbR c false rd rn rm z rs T_R))]) t\n\n            // STORE SINGLE\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWaR c rd rn rm z i T_I))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWaR c rd rn rm z rs T_R))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWaI c rd rn i))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWaR c rd rn rm T_LSL 0 T_I))]) t\n\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBaR c rd rn rm z i T_I))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBaR c rd rn rm z rs T_R))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_INT i :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBaI c rd rn i))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: T_COMMA :: T_REG rm :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBaR c rd rn rm T_LSL 0 T_I))]) t\n\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbI c false rd rn 0))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbI c true rd rn i))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbI c false rd rn i))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c true rd rn rm T_LSL 0 T_I))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c false rd rn rm T_LSL 0 T_I))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c true rd rn rm z i T_I))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c false rd rn rm z i T_I))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c true rd rn rm z rs T_R))]) t\n            | T_STR c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strWbR c false rd rn rm z rs T_R))]) t\n\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbI c false rd rn 0))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbI c true rd rn i))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbI c false rd rn i))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c true rd rn rm T_LSL 0 T_I))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c false rd rn rm T_LSL 0 T_I))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c true rd rn rm z i T_I))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_INT i :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c false rd rn rm z i T_I))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: T_EXCL :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c true rd rn rm z rs T_R))]) t\n            | T_STRB c :: T_REG rd :: T_COMMA :: T_L_BRAC :: T_REG rn :: T_COMMA :: T_REG rm :: T_COMMA :: T_SHIFT (z,_) :: T_REG rs :: T_R_BRAC :: t ->\n                parseRec (m+4) l labels (outLst@[(m, Instr(l, strBbR c false rd rn rm z rs T_R))]) t\n\n            // LOAD MULTIPLE\n            | T_LDM (c,S_IA) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmIA c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_IA) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmIA c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_IB) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmIB c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_IB) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmIB c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_DA) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmDA c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_DA) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmDA c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_DB) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmDB c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_LDM (c,S_DB) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, ldmDB c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n\n            // STORE MULTIPLE\n            | T_STM (c,S_IA) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmIA c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_IA) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmIA c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_IB) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmIB c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_IB) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmIB c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_DA) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmDA c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_DA) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmDA c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_DB) :: T_REG rn :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmDB c false rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n            | T_STM (c,S_DB) :: T_REG rn :: T_EXCL :: T_COMMA :: t ->\n                match regList t with\n                | Ok(rl, tokLst) -> parseRec (m+4) l labels (outLst@[(m, Instr(l, stmDB c true rn rl))]) tokLst\n                | Err(_,s) -> Err(l,s)\n\n            // DIRECTIVES\n            | T_LABEL s :: T_EQU :: T_INT i :: t ->\n                parseRec m l (Map.add s i labels) outLst t\n            | T_LABEL s1 :: T_EQU :: T_LABEL s2 :: t ->\n                match Map.tryFind s2 labels with\n                | Some(n) -> parseRec m l (Map.add s1 n labels) outLst t\n                | None -> Err(l,sprintf \"Undefined label: %s.\" s2)\n\n            //| T_LABEL \n\n            | T_END c :: t ->\n                parseRec (m+4) l labels (outLst@[(m, EndRef(endRef l c))]) t\n\n            | T_LABEL s :: t -> parseRec m l (Map.add s (m) labels) outLst t\n\n            | [] -> resolveRefs labels m (outLst@[(m, Terminate(l))])\n\n            | T_NEWLINE :: t -> parseRec m (l+1) labels outLst t\n\n            | T_ERROR s :: t -> Err(l,sprintf \"Invalid input string: %s.\" s)\n            | tok :: t -> Err(l,sprintf \"Unexpected token: %A. Followed by: %s.\" tok (errorList t))\n        // Convert output list to map for interpretation.\n        match parseRec 0 1 Map.empty [] tokLst with\n        | Ok(i) -> Ok(Map.ofList i)\n        | Err(l,s) -> Err(l,s)","﻿// This module details the instruction condition codes.\n\nnamespace Common\nmodule Conditions =\n    \n    open State\n\n    // Condition functions\n    /// Always condition.\n    let checkAL state =\n        true\n\n    /// Equal condition.\n    let checkEQ state =\n        readZFlag state\n\n    /// Not equal condition.\n    let checkNE state =\n        not (readZFlag state)\n\n    /// Carry set condition.\n    let checkCS state =\n        readCFlag state\n\n    /// Carry clear condition.\n    let checkCC state =\n        not (readCFlag state)\n\n    /// Minus condition.\n    let checkMI state =\n        readNFlag state\n\n    /// Plus condition.\n    let checkPL state =\n        not (readNFlag state)\n\n    /// Overflow set condition\n    let checkVS state =\n        readVFlag state\n\n    /// Overflow clear condition\n    let checkVC state =\n        not (readVFlag state)\n\n    /// HI condition.\n    let checkHI state =\n        (readCFlag state) && (not (readZFlag state))\n\n    /// LS condition.\n    let checkLS state =\n        (not (readCFlag state)) || (readZFlag state)\n\n    /// Greater than or equal condition.\n    let checkGE state =\n        (readNFlag state) = (readVFlag state)\n\n    /// Less than condition.\n    let checkLT state =\n        (readNFlag state) <> (readVFlag state)\n\n    /// Greater than condition.\n    let checkGT state =\n        (not (readZFlag state)) && ((readNFlag state) = (readVFlag state))\n\n    /// Less than or equal condition.\n    let checkLE state =\n        (readZFlag state) && ((readNFlag state) <> (readVFlag state))","﻿// This module contains the tokeniser\n\nnamespace Parse\nmodule Tokeniser =\n    \n    open System.Text.RegularExpressions\n    open Common.Conditions\n    open Common.State\n    open Common.Types\n\n\n    // Integer validity checks\n    let int12 num =\n        //let checkBottom2 n = (n &&& 3u <> 0u)\n        let rec shift n shamt =\n            match (n &&& (0xFFFFFF00u)) = 0u with\n            | true -> true\n            | false when (shamt < 15) -> shift ((n>>>2)|||(n<<<30)) (shamt+1)\n            | _ -> false\n        shift (uint32 num) 0\n            \n    \n    (***TOKENS***)\n    // To add token:\n        // Add to discriminated union\n        // Add to equals override\n        // Add to stringToToken function\n\n    \n    /// Add tokens here! Format: \"T_x\"\n    [<CustomEquality; NoComparison>]\n    type Token =\n        // Instructions:\n            // All of these have a condition function, some have 'S' bool\n        | T_MOV of (StateHandle -> bool)*bool\n        | T_MVN of (StateHandle -> bool)*bool\n        | T_MRS of (StateHandle -> bool)\n        | T_MSR of (StateHandle -> bool)\n\n        | T_ADD of (StateHandle -> bool)*bool\n        | T_ADC of (StateHandle -> bool)*bool\n        | T_SUB of (StateHandle -> bool)*bool\n        | T_SBC of (StateHandle -> bool)*bool\n        | T_RSB of (StateHandle -> bool)*bool\n        | T_RSC of (StateHandle -> bool)*bool\n\n        | T_MUL of (StateHandle -> bool)*bool\n        | T_MLA of (StateHandle -> bool)*bool\n        | T_UMULL of (StateHandle -> bool)*bool\n        | T_UMLAL of (StateHandle -> bool)*bool\n        | T_SMULL of (StateHandle -> bool)*bool\n        | T_SMLAL of (StateHandle -> bool)*bool\n\n        | T_AND of (StateHandle -> bool)*bool\n        | T_ORR of (StateHandle -> bool)*bool\n        | T_EOR of (StateHandle -> bool)*bool\n        | T_BIC of (StateHandle -> bool)*bool\n\n        | T_CMP of (StateHandle -> bool)\n        | T_CMN of (StateHandle -> bool)\n        | T_TST of (StateHandle -> bool)\n        | T_TEQ of (StateHandle -> bool)\n\n        | T_B of (StateHandle -> bool)\n        | T_BL of (StateHandle -> bool)\n        | T_BX of (StateHandle -> bool)\n\n        | T_LDR of (StateHandle -> bool)\n        | T_LDRB of (StateHandle -> bool)\n        | T_LDRH of (StateHandle -> bool)\n        | T_LDM of (StateHandle -> bool)*stackOrder\n\n        | T_STR of (StateHandle -> bool)\n        | T_STRB of (StateHandle -> bool)\n        | T_STRH of (StateHandle -> bool)\n        | T_STM of (StateHandle -> bool)*stackOrder\n\n        | T_ADR of (StateHandle -> bool)\n        | T_SWP of (StateHandle -> bool)\n        | T_SWI of (StateHandle -> bool)\n        | T_NOP of (StateHandle -> bool)\n        | T_CLZ of (StateHandle -> bool)\n\n        // Directives\n        | T_DCD\n        | T_EQU\n        | T_FILL\n        | T_END of (StateHandle -> bool)\n        // shift operands\n        | T_SHIFT of shiftOp*((StateHandle -> bool)*bool)\n        // Values\n        | T_REG of int\n        | T_INT of int\n        | T_LABEL of string\n        // Others\n        | T_COMMA\n        | T_L_BRAC\n        | T_R_BRAC\n        | T_EXCL\n        | T_EQUAL\n        | T_L_CBR\n        | T_R_CBR\n        | T_DASH\n        | T_NEWLINE\n        | T_ERROR of string\n\n        // Equals for testing.\n        override x.Equals yobj =\n            let state = initState\n            match yobj with\n            | :? Token as y -> match x,y with\n                               | T_REG ix, T_REG iy -> ix = iy\n                               | T_INT ix, T_INT iy -> ix = iy\n                               | T_LABEL sx, T_LABEL sy -> sx = sy\n\n                               | T_COMMA, T_COMMA -> true\n                               | T_L_BRAC, T_L_BRAC -> true\n                               | T_R_BRAC, T_R_BRAC -> true\n                               | T_EXCL, T_EXCL -> true\n                               | T_L_CBR, T_R_CBR -> true\n                               | T_DASH, T_DASH -> true\n                               | T_NEWLINE, T_NEWLINE -> true\n                               | T_ERROR tx, T_ERROR ty -> tx = ty\n\n                               | T_MOV (cx,sx), T_MOV (cy,sy) -> cx state = cy state && sx = sy\n                               | T_MVN (cx,sx), T_MVN (cy,sy) -> cx state = cy state && sx = sy\n                               | T_MRS cx, T_MRS cy -> cx state = cy state\n                               | T_MSR cx, T_MSR cy -> cx state = cy state\n                               | T_ADD (cx,sx), T_ADD (cy,sy) -> cx state = cy state && sx = sy\n                               | T_ADC (cx,sx), T_ADC (cy,sy) -> cx state = cy state && sx = sy\n                               | T_SUB (cx,sx), T_SUB (cy,sy) -> cx state = cy state && sx = sy\n                               | T_SBC (cx,sx), T_SBC (cy,sy) -> cx state = cy state && sx = sy\n                               | T_RSB (cx,sx), T_RSB (cy,sy) -> cx state = cy state && sx = sy\n                               | T_RSC (cx,sx), T_RSC (cy,sy) -> cx state = cy state && sx = sy\n                               | T_MUL (cx,sx), T_MUL (cy,sy) -> cx state = cy state && sx = sy\n                               | T_MLA (cx,sx), T_MLA (cy,sy) -> cx state = cy state && sx = sy\n                               | T_AND (cx,sx), T_AND (cy,sy) -> cx state = cy state && sx = sy\n                               | T_ORR (cx,sx), T_ORR (cy,sy) -> cx state = cy state && sx = sy\n                               | T_EOR (cx,sx), T_EOR (cy,sy) -> cx state = cy state && sx = sy\n                               | T_BIC (cx,sx), T_BIC (cy,sy) -> cx state = cy state && sx = sy\n                               | T_CMP cx, T_CMP cy -> cx state = cy state\n                               | T_CMN cx, T_CMN cy -> cx state = cy state\n                               | T_TST cx, T_TST cy -> cx state = cy state\n                               | T_TEQ cx, T_TEQ cy -> cx state = cy state\n                               | T_B cx, T_B cy -> cx state = cy state\n                               | T_BL cx, T_BL cy -> cx state = cy state\n                               | T_BX cx, T_BX cy -> cx state = cy state\n                               | T_LDR cx, T_LDR cy -> cx state = cy state\n                               | T_LDRB cx, T_LDRB cy -> cx state = cy state\n                               | T_LDRH cx, T_LDRH cy -> cx state = cy state\n                               | T_LDM (cx,sx), T_LDM (cy,sy) -> cx state = cy state && sx = sy\n                               | T_STR cx, T_STR cy -> cx state = cy state\n                               | T_STRB cx, T_STRB cy -> cx state = cy state\n                               | T_STRH cx, T_STRH cy -> cx state = cy state\n                               | T_STM (cx,sx), T_STM (cy,sy) -> cx state = cy state && sx = sy\n                               | T_ADR cx, T_ADR cy -> cx state = cy state\n                               | T_SWP cx, T_SWP cy -> cx state = cy state\n                               | T_SWI cx, T_SWI cy -> cx state = cy state\n                               | T_NOP cx, T_NOP cy -> cx state = cy state\n                               | T_CLZ cx, T_CLZ cy -> cx state = cy state\n                               | T_DCD, T_DCD -> true\n                               | T_EQU, T_EQU -> true\n                               | T_FILL, T_FILL -> true\n                               | T_END cx, T_END cy -> cx state = cy state\n                               | T_SHIFT (tx,(cx,sx)), T_SHIFT (ty,(cy,sy)) -> tx = ty && cx state = cy state && sx = sy\n                               | _,_ -> false\n            | _ -> false\n\n        override x.GetHashCode() = hash 1 // To avoid warnings! I advise not hashing tokens.\n\n    (***SUFFIXES***)\n\n    /// Instruction condition codes.\n    let cond = @\"(|EQ|NE|CS|HS|CC|LO|MI|PL|VS|VC|HI|LS|GE|LT|GT|LE|AL)\"\n\n    /// S suffix, for setting flags.\n    let setFlags = @\"(|S)\"\n\n    /// Stack suffix, for load/store multiple\n    let stackSfx = @\"(IA|IB|DA|DB|FD|FA|ED|EA)\"\n\n    (***TOKENISER***)\n\n    // active patterns for matching strings\n\n    // match generic token with no output.\n    let (|TOKEN_MATCH|_|) pattern str =\n        let m = Regex.Match(str, pattern, RegexOptions.IgnoreCase)\n        if m.Success then Some() else None\n\n    /// Match input string to condition code.\n    let matchCond = function\n        | TOKEN_MATCH \"EQ\" -> checkEQ\n        | TOKEN_MATCH \"NE\" -> checkNE\n        | TOKEN_MATCH \"CS\" -> checkCS\n        | TOKEN_MATCH \"HS\" -> checkCS\n        | TOKEN_MATCH \"CC\" -> checkCC\n        | TOKEN_MATCH \"LO\" -> checkCC\n        | TOKEN_MATCH \"MI\" -> checkMI\n        | TOKEN_MATCH \"PL\" -> checkPL\n        | TOKEN_MATCH \"VS\" -> checkVS\n        | TOKEN_MATCH \"VC\" -> checkVC\n        | TOKEN_MATCH \"HI\" -> checkHI\n        | TOKEN_MATCH \"GE\" -> checkGE\n        | TOKEN_MATCH \"LT\" -> checkLT\n        | TOKEN_MATCH \"GT\" -> checkGT\n        | TOKEN_MATCH \"LE\" -> checkLE\n        | TOKEN_MATCH \"AL\" -> checkAL\n        | _ -> checkAL\n\n    /// Match 'S' suffix to bool.\n    let matchS = function\n        | TOKEN_MATCH \"S\" -> true\n        | _ -> false\n\n    /// Match LDM suffix to stackOrder.\n    let matchLDM = function\n        | TOKEN_MATCH \"IA\" -> S_IA\n        | TOKEN_MATCH \"IB\" -> S_IB\n        | TOKEN_MATCH \"DA\" -> S_DA\n        | TOKEN_MATCH \"DB\" -> S_DB\n        | TOKEN_MATCH \"FD\" -> S_IA\n        | TOKEN_MATCH \"ED\" -> S_IB\n        | TOKEN_MATCH \"FA\" -> S_DA\n        | TOKEN_MATCH \"EA\" -> S_DB\n        | _ -> S_IA\n\n    /// Match STM suffix to stackOrder.\n    let matchSTM = function\n        | TOKEN_MATCH \"IA\" -> S_IA\n        | TOKEN_MATCH \"IB\" -> S_IB\n        | TOKEN_MATCH \"DA\" -> S_DA\n        | TOKEN_MATCH \"DB\" -> S_DB\n        | TOKEN_MATCH \"EA\" -> S_IA\n        | TOKEN_MATCH \"FA\" -> S_IB\n        | TOKEN_MATCH \"ED\" -> S_DA\n        | TOKEN_MATCH \"FD\" -> S_DB\n        | _ -> S_IA\n\n    // match an instruction (with condition code)\n    let (|INSTR_MATCH|_|) pattern str =\n        let m = Regex.Match(str, pattern+cond+\"$\", RegexOptions.IgnoreCase)\n        if m.Success then Some(matchCond m.Groups.[1].Value) else None\n\n    // match an instruction with condition code AND 's' suffix (for setting flags)\n    let (|INSTR_S_MATCH|_|) pattern str =\n        let m = Regex.Match(str, pattern+cond+setFlags+\"$\", RegexOptions.IgnoreCase)\n        if m.Success then Some(matchCond m.Groups.[1].Value, matchS m.Groups.[2].Value) else None\n\n    // match load multiple instruction with stack suffix.\n    let (|LDM_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^LDM\"+stackSfx+cond+\"$\", RegexOptions.IgnoreCase)\n        if m.Success then Some(matchCond m.Groups.[1].Value, matchLDM m.Groups.[2].Value) else None\n        \n    // match load multiple instruction with stack suffix.\n    let (|STM_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^STM\"+stackSfx+cond+\"$\", RegexOptions.IgnoreCase)\n        if m.Success then Some(matchCond m.Groups.[1].Value, matchSTM m.Groups.[2].Value) else None\n\n    // match a valid register\n    let (|REG_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^R([0-9]|1[0-5])$\", RegexOptions.IgnoreCase)\n        if m.Success then Some(int m.Groups.[1].Value) else None\n\n    let (|LABEL_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^([a-zA-Z_][a-zA-Z0-9_]*)$\")\n        if m.Success then Some(m.Groups.[1].Value) else None\n\n    let (|DEC_LIT_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^#?([0-9]+)$\")\n        if m.Success then Some(int m.Groups.[1].Value) else None\n\n    let (|HEX_LIT_MATCH|_|) str =\n        let m = Regex.Match(str, @\"^#?(0x[0-9a-fA-F]+)$\")\n        if m.Success then Some(System.Convert.ToInt32 (m.Groups.[1].Value, 16)) else None\n\n    \n    /// Match input string to token.\n    let private stringToToken = function\n        // registers & aliases\n        | REG_MATCH i -> T_REG i\n        | TOKEN_MATCH @\"^a1$\" -> T_REG 0\n        | TOKEN_MATCH @\"^a2$\" -> T_REG 1\n        | TOKEN_MATCH @\"^a3$\" -> T_REG 2\n        | TOKEN_MATCH @\"^a4$\" -> T_REG 3\n        | TOKEN_MATCH @\"^v1$\" -> T_REG 4\n        | TOKEN_MATCH @\"^v2$\" -> T_REG 5\n        | TOKEN_MATCH @\"^v3$\" -> T_REG 6\n        | TOKEN_MATCH @\"^v4$\" -> T_REG 7\n        | TOKEN_MATCH @\"^v5$\" -> T_REG 8\n        | TOKEN_MATCH @\"^v6$\" -> T_REG 9\n        | TOKEN_MATCH @\"^v7$\" -> T_REG 10\n        | TOKEN_MATCH @\"^v8$\" -> T_REG 11\n        | TOKEN_MATCH @\"^sb$\" -> T_REG 9\n        | TOKEN_MATCH @\"^sl$\" -> T_REG 10\n        | TOKEN_MATCH @\"^fp$\" -> T_REG 11\n        | TOKEN_MATCH @\"^ip$\" -> T_REG 12\n        | TOKEN_MATCH @\"^sp$\" -> T_REG 13\n        | TOKEN_MATCH @\"^lr$\" -> T_REG 14\n        | TOKEN_MATCH @\"^pc$\" -> T_REG 15\n        // other\n        | \",\" -> T_COMMA\n        | \"[\" -> T_L_BRAC\n        | \"]\" -> T_R_BRAC\n        | \"!\" -> T_EXCL\n        | \"=\" -> T_EQUAL\n        | \"{\" -> T_L_CBR\n        | \"}\" -> T_R_CBR\n        | \"-\" -> T_DASH\n        | \"\\n\" -> T_NEWLINE\n        | DEC_LIT_MATCH i -> T_INT i\n        | HEX_LIT_MATCH i -> T_INT i\n        // instructions\n        | INSTR_S_MATCH @\"^MOV\" cs -> T_MOV cs\n        | INSTR_S_MATCH @\"^MVN\" cs -> T_MVN cs\n        | INSTR_MATCH @\"^MRS\" c -> T_MRS c\n        | INSTR_MATCH @\"^MSR\" c -> T_MSR c\n        | INSTR_S_MATCH @\"^ADD\" cs -> T_ADD cs\n        | INSTR_S_MATCH @\"^ADC\" cs -> T_ADC cs\n        | INSTR_S_MATCH @\"^SUB\" cs -> T_SUB cs\n        | INSTR_S_MATCH @\"^SBC\" cs -> T_SBC cs\n        | INSTR_S_MATCH @\"^RSB\" cs -> T_RSB cs\n        | INSTR_S_MATCH @\"^RSC\" cs -> T_RSC cs\n        | INSTR_S_MATCH @\"^MUL\" cs -> T_MUL cs\n        | INSTR_S_MATCH @\"^MLA\" cs -> T_MLA cs\n        | INSTR_S_MATCH @\"^UMULL\" cs -> T_UMULL cs\n        | INSTR_S_MATCH @\"^UMLAL\" cs -> T_UMLAL cs\n        | INSTR_S_MATCH @\"^SMULL\" cs -> T_SMULL cs\n        | INSTR_S_MATCH @\"^SMLAL\" cs -> T_SMLAL cs\n        | INSTR_S_MATCH @\"^AND\" cs -> T_AND cs\n        | INSTR_S_MATCH @\"^ORR\" cs -> T_ORR cs\n        | INSTR_S_MATCH @\"^EOR\" cs -> T_EOR cs\n        | INSTR_S_MATCH @\"^BIC\" cs -> T_BIC cs\n        | INSTR_MATCH @\"^CMP\" c -> T_CMP c\n        | INSTR_MATCH @\"^CMN\" c -> T_CMN c\n        | INSTR_MATCH @\"^TST\" c -> T_TST c\n        | INSTR_MATCH @\"^TEQ\" c -> T_TEQ c\n        | INSTR_MATCH @\"^B\" c -> T_B c\n        | INSTR_MATCH @\"^BL\" c -> T_BL c\n        | INSTR_MATCH @\"^BX\" c -> T_BX c\n        | INSTR_MATCH @\"^LDR\" c -> T_LDR c\n        | INSTR_MATCH @\"^LDRB\" c -> T_LDRB c\n        | INSTR_MATCH @\"^LDRH\" c -> T_LDRH c\n        | LDM_MATCH cs -> T_LDM cs\n        | INSTR_MATCH @\"^STR\" c -> T_STR c\n        | INSTR_MATCH @\"^STRB\" c -> T_STRB c\n        | INSTR_MATCH @\"^STRH\" c -> T_STRH c\n        | STM_MATCH cs -> T_STM cs\n        | INSTR_MATCH @\"^SWP\" c -> T_SWP c\n        | INSTR_MATCH @\"^SWI\" c -> T_SWI c\n        | INSTR_MATCH @\"^NOP\" c -> T_NOP c\n        | INSTR_MATCH @\"^ADR\" c -> T_ADR c\n        | INSTR_MATCH @\"^END\" c -> T_END c\n        | INSTR_MATCH @\"^CLZ\" c -> T_CLZ c\n        | TOKEN_MATCH @\"^DCD$\" -> T_DCD\n        | TOKEN_MATCH @\"^EQU$\" -> T_EQU\n        | TOKEN_MATCH @\"^FILL$\" -> T_FILL\n        // shift operands\n        | INSTR_S_MATCH @\"^ASR\" cs -> T_SHIFT (T_ASR, cs)\n        | INSTR_S_MATCH @\"^LSL\" cs -> T_SHIFT (T_LSL, cs)\n        | INSTR_S_MATCH @\"^LSR\" cs -> T_SHIFT (T_LSR, cs)\n        | INSTR_S_MATCH @\"^ROR\" cs -> T_SHIFT (T_ROR, cs)\n        | INSTR_S_MATCH @\"^RRX\" cs -> T_SHIFT (T_RRX, cs)\n        // labels\n        | LABEL_MATCH s -> T_LABEL s\n        //| t -> failwithf \"Invalid token %A\" t\n        | t -> T_ERROR t\n\n\n    /// Take in string and output list of tokens.\n    let tokenise (source: string) =\n        Regex.Split(source, @\"([,\\[\\]!\\n])|[\\ \\t\\r\\f]+|;.*\")\n        |> Array.toList\n        |> List.filter (fun s -> s <> null)\n        |> List.filter (fun s -> s <> \"\")\n        |> List.map stringToToken","﻿namespace Execute\nopen Common.State\nopen Parse\nopen Interpret\nopen Common.Error\n\nmodule GetStates =\n\n    let newStateAll oldState inString = inString |> Tokeniser.tokenise |> Parser.parser |> wrapErr (Interpreter.interpret oldState) \n    let newStateSingle oldState inString = inString |> Tokeniser.tokenise |> Parser.parser |> wrapErr (Interpreter.interpretLine oldState)","module Main\nopen Common.State\nopen Common.Error\nopen Execute.GetStates\nopen Parse\nopen Interpret\nopen Fable.Core\nopen Fable.Import\nopen FsHtml\nopen Fable.Core.JsInterop\n\n[<EntryPoint>]    \nlet main args = \n    let mutable state = initStateVisual\n    let code = \"MOV R1, 5\"\n    let readFromConsole: JsFunc0<string> = import \"readFromConsole\" \"../js/helper_functions.js\"\n\n    let state = initStateVisual\n    let nState = newStateAll state code\n    let boolString b = \n        match b with\n        | true -> sprintf \"%i\" 1\n        | false -> sprintf \"%i\" 0\n    let stateString state = \n        let getReg state i = \n            match i with\n            | a when a <= 15 -> sprintf \"%i\" (readReg i state)\n            | 16 -> boolString (readNFlag state)\n            | 17 -> boolString (readZFlag state)\n            | 18 -> boolString (readCFlag state)\n            | 19 -> boolString (readVFlag state)\n            | _ -> \"ERROR\"\n\n        let testList = List.map (getReg state) [0..19]\n        testList.ToString\n\n    let outputString = \n        match nState with\n            | Ok(i,s) -> (stateString s)\n            | Err(i,msg) -> (fun _ -> \"ERROR\")\n    printfn \"%s\" (outputString ())\n    printfn \"%s\" (readFromConsole.Invoke())\n    0"],"names":["FSymbol","foldBack","tryFind","fold","map","listOfArray","seqCompareWith","seqMap","append","seqFold","reverse","filter","readFromConsole","readline","require","create","split"],"mappings":"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"}